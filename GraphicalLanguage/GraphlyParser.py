# Generated from Graphly.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3K")
        buf.write("\u062f\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\3\2\7\2R\n\2\f\2\16\2U\13\2\3\2\3\2\6")
        buf.write("\2Y\n\2\r\2\16\2Z\7\2]\n\2\f\2\16\2`\13\2\3\2\7\2c\n\2")
        buf.write("\f\2\16\2f\13\2\3\2\3\2\7\2j\n\2\f\2\16\2m\13\2\3\2\6")
        buf.write("\2p\n\2\r\2\16\2q\3\2\3\2\7\2v\n\2\f\2\16\2y\13\2\7\2")
        buf.write("{\n\2\f\2\16\2~\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\7\3\u008f\n\3\f\3\16\3\u0092")
        buf.write("\13\3\5\3\u0094\n\3\3\4\7\4\u0097\n\4\f\4\16\4\u009a\13")
        buf.write("\4\3\4\3\4\7\4\u009e\n\4\f\4\16\4\u00a1\13\4\3\4\3\4\7")
        buf.write("\4\u00a5\n\4\f\4\16\4\u00a8\13\4\3\5\3\5\6\5\u00ac\n\5")
        buf.write("\r\5\16\5\u00ad\3\5\3\5\6\5\u00b2\n\5\r\5\16\5\u00b3\3")
        buf.write("\5\3\5\6\5\u00b8\n\5\r\5\16\5\u00b9\3\5\3\5\6\5\u00be")
        buf.write("\n\5\r\5\16\5\u00bf\3\5\3\5\6\5\u00c4\n\5\r\5\16\5\u00c5")
        buf.write("\3\5\3\5\6\5\u00ca\n\5\r\5\16\5\u00cb\3\5\3\5\6\5\u00d0")
        buf.write("\n\5\r\5\16\5\u00d1\3\5\3\5\6\5\u00d6\n\5\r\5\16\5\u00d7")
        buf.write("\3\5\3\5\7\5\u00dc\n\5\f\5\16\5\u00df\13\5\3\5\3\5\3\5")
        buf.write("\7\5\u00e4\n\5\f\5\16\5\u00e7\13\5\3\5\3\5\3\6\7\6\u00ec")
        buf.write("\n\6\f\6\16\6\u00ef\13\6\3\6\3\6\6\6\u00f3\n\6\r\6\16")
        buf.write("\6\u00f4\3\6\3\6\3\6\6\6\u00fa\n\6\r\6\16\6\u00fb\3\6")
        buf.write("\3\6\6\6\u0100\n\6\r\6\16\6\u0101\3\6\7\6\u0105\n\6\f")
        buf.write("\6\16\6\u0108\13\6\3\6\7\6\u010b\n\6\f\6\16\6\u010e\13")
        buf.write("\6\3\6\3\6\6\6\u0112\n\6\r\6\16\6\u0113\3\6\3\6\3\6\5")
        buf.write("\6\u0119\n\6\3\6\7\6\u011c\n\6\f\6\16\6\u011f\13\6\3\6")
        buf.write("\3\6\3\7\3\7\6\7\u0125\n\7\r\7\16\7\u0126\3\7\3\7\3\7")
        buf.write("\7\7\u012c\n\7\f\7\16\7\u012f\13\7\3\7\3\7\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u013f\n\b\3\t")
        buf.write("\7\t\u0142\n\t\f\t\16\t\u0145\13\t\3\t\3\t\6\t\u0149\n")
        buf.write("\t\r\t\16\t\u014a\3\t\3\t\7\t\u014f\n\t\f\t\16\t\u0152")
        buf.write("\13\t\3\t\3\t\7\t\u0156\n\t\f\t\16\t\u0159\13\t\3\t\3")
        buf.write("\t\7\t\u015d\n\t\f\t\16\t\u0160\13\t\3\t\3\t\7\t\u0164")
        buf.write("\n\t\f\t\16\t\u0167\13\t\3\t\3\t\3\n\7\n\u016c\n\n\f\n")
        buf.write("\16\n\u016f\13\n\3\n\3\n\6\n\u0173\n\n\r\n\16\n\u0174")
        buf.write("\3\n\3\n\7\n\u0179\n\n\f\n\16\n\u017c\13\n\3\n\3\n\7\n")
        buf.write("\u0180\n\n\f\n\16\n\u0183\13\n\3\n\3\n\7\n\u0187\n\n\f")
        buf.write("\n\16\n\u018a\13\n\3\n\3\n\7\n\u018e\n\n\f\n\16\n\u0191")
        buf.write("\13\n\3\n\3\n\7\n\u0195\n\n\f\n\16\n\u0198\13\n\3\n\3")
        buf.write("\n\7\n\u019c\n\n\f\n\16\n\u019f\13\n\3\n\3\n\3\13\7\13")
        buf.write("\u01a4\n\13\f\13\16\13\u01a7\13\13\3\13\3\13\6\13\u01ab")
        buf.write("\n\13\r\13\16\13\u01ac\3\13\3\13\7\13\u01b1\n\13\f\13")
        buf.write("\16\13\u01b4\13\13\3\13\3\13\7\13\u01b8\n\13\f\13\16\13")
        buf.write("\u01bb\13\13\3\13\3\13\7\13\u01bf\n\13\f\13\16\13\u01c2")
        buf.write("\13\13\3\13\3\13\6\13\u01c6\n\13\r\13\16\13\u01c7\3\13")
        buf.write("\3\13\3\f\7\f\u01cd\n\f\f\f\16\f\u01d0\13\f\3\f\3\f\6")
        buf.write("\f\u01d4\n\f\r\f\16\f\u01d5\3\f\3\f\7\f\u01da\n\f\f\f")
        buf.write("\16\f\u01dd\13\f\3\f\3\f\7\f\u01e1\n\f\f\f\16\f\u01e4")
        buf.write("\13\f\3\f\3\f\7\f\u01e8\n\f\f\f\16\f\u01eb\13\f\3\f\3")
        buf.write("\f\7\f\u01ef\n\f\f\f\16\f\u01f2\13\f\3\f\3\f\3\r\7\r\u01f7")
        buf.write("\n\r\f\r\16\r\u01fa\13\r\3\r\3\r\6\r\u01fe\n\r\r\r\16")
        buf.write("\r\u01ff\3\r\3\r\7\r\u0204\n\r\f\r\16\r\u0207\13\r\3\r")
        buf.write("\3\r\7\r\u020b\n\r\f\r\16\r\u020e\13\r\3\r\3\r\3\16\7")
        buf.write("\16\u0213\n\16\f\16\16\16\u0216\13\16\3\16\3\16\6\16\u021a")
        buf.write("\n\16\r\16\16\16\u021b\3\16\3\16\7\16\u0220\n\16\f\16")
        buf.write("\16\16\u0223\13\16\3\16\3\16\7\16\u0227\n\16\f\16\16\16")
        buf.write("\u022a\13\16\3\16\3\16\7\16\u022e\n\16\f\16\16\16\u0231")
        buf.write("\13\16\3\16\3\16\7\16\u0235\n\16\f\16\16\16\u0238\13\16")
        buf.write("\3\16\3\16\3\17\7\17\u023d\n\17\f\17\16\17\u0240\13\17")
        buf.write("\3\17\3\17\6\17\u0244\n\17\r\17\16\17\u0245\3\17\3\17")
        buf.write("\7\17\u024a\n\17\f\17\16\17\u024d\13\17\3\17\3\17\7\17")
        buf.write("\u0251\n\17\f\17\16\17\u0254\13\17\3\17\3\17\7\17\u0258")
        buf.write("\n\17\f\17\16\17\u025b\13\17\3\17\3\17\7\17\u025f\n\17")
        buf.write("\f\17\16\17\u0262\13\17\3\17\3\17\3\20\7\20\u0267\n\20")
        buf.write("\f\20\16\20\u026a\13\20\3\20\3\20\6\20\u026e\n\20\r\20")
        buf.write("\16\20\u026f\3\20\3\20\7\20\u0274\n\20\f\20\16\20\u0277")
        buf.write("\13\20\3\20\3\20\7\20\u027b\n\20\f\20\16\20\u027e\13\20")
        buf.write("\3\20\3\20\7\20\u0282\n\20\f\20\16\20\u0285\13\20\3\20")
        buf.write("\3\20\7\20\u0289\n\20\f\20\16\20\u028c\13\20\3\20\3\20")
        buf.write("\3\21\7\21\u0291\n\21\f\21\16\21\u0294\13\21\3\21\3\21")
        buf.write("\6\21\u0298\n\21\r\21\16\21\u0299\3\21\3\21\7\21\u029e")
        buf.write("\n\21\f\21\16\21\u02a1\13\21\3\21\3\21\7\21\u02a5\n\21")
        buf.write("\f\21\16\21\u02a8\13\21\3\21\3\21\3\22\7\22\u02ad\n\22")
        buf.write("\f\22\16\22\u02b0\13\22\3\22\3\22\6\22\u02b4\n\22\r\22")
        buf.write("\16\22\u02b5\3\22\3\22\7\22\u02ba\n\22\f\22\16\22\u02bd")
        buf.write("\13\22\3\22\3\22\7\22\u02c1\n\22\f\22\16\22\u02c4\13\22")
        buf.write("\3\22\3\22\7\22\u02c8\n\22\f\22\16\22\u02cb\13\22\3\22")
        buf.write("\3\22\7\22\u02cf\n\22\f\22\16\22\u02d2\13\22\3\22\3\22")
        buf.write("\3\23\7\23\u02d7\n\23\f\23\16\23\u02da\13\23\3\23\3\23")
        buf.write("\6\23\u02de\n\23\r\23\16\23\u02df\3\23\3\23\7\23\u02e4")
        buf.write("\n\23\f\23\16\23\u02e7\13\23\3\23\3\23\7\23\u02eb\n\23")
        buf.write("\f\23\16\23\u02ee\13\23\3\23\3\23\7\23\u02f2\n\23\f\23")
        buf.write("\16\23\u02f5\13\23\3\23\3\23\7\23\u02f9\n\23\f\23\16\23")
        buf.write("\u02fc\13\23\3\23\3\23\7\23\u0300\n\23\f\23\16\23\u0303")
        buf.write("\13\23\3\23\3\23\7\23\u0307\n\23\f\23\16\23\u030a\13\23")
        buf.write("\3\23\3\23\7\23\u030e\n\23\f\23\16\23\u0311\13\23\3\23")
        buf.write("\3\23\7\23\u0315\n\23\f\23\16\23\u0318\13\23\3\23\3\23")
        buf.write("\3\24\7\24\u031d\n\24\f\24\16\24\u0320\13\24\3\24\3\24")
        buf.write("\6\24\u0324\n\24\r\24\16\24\u0325\3\24\3\24\7\24\u032a")
        buf.write("\n\24\f\24\16\24\u032d\13\24\3\24\3\24\7\24\u0331\n\24")
        buf.write("\f\24\16\24\u0334\13\24\3\24\3\24\7\24\u0338\n\24\f\24")
        buf.write("\16\24\u033b\13\24\3\24\3\24\7\24\u033f\n\24\f\24\16\24")
        buf.write("\u0342\13\24\3\24\3\24\7\24\u0346\n\24\f\24\16\24\u0349")
        buf.write("\13\24\3\24\3\24\7\24\u034d\n\24\f\24\16\24\u0350\13\24")
        buf.write("\3\24\3\24\3\25\7\25\u0355\n\25\f\25\16\25\u0358\13\25")
        buf.write("\3\25\3\25\7\25\u035c\n\25\f\25\16\25\u035f\13\25\3\25")
        buf.write("\3\25\7\25\u0363\n\25\f\25\16\25\u0366\13\25\3\25\3\25")
        buf.write("\7\25\u036a\n\25\f\25\16\25\u036d\13\25\3\25\3\25\3\26")
        buf.write("\3\26\5\26\u0373\n\26\3\27\7\27\u0376\n\27\f\27\16\27")
        buf.write("\u0379\13\27\3\27\3\27\7\27\u037d\n\27\f\27\16\27\u0380")
        buf.write("\13\27\3\27\3\27\7\27\u0384\n\27\f\27\16\27\u0387\13\27")
        buf.write("\3\27\3\27\7\27\u038b\n\27\f\27\16\27\u038e\13\27\3\27")
        buf.write("\3\27\6\27\u0392\n\27\r\27\16\27\u0393\3\27\3\27\7\27")
        buf.write("\u0398\n\27\f\27\16\27\u039b\13\27\3\27\3\27\7\27\u039f")
        buf.write("\n\27\f\27\16\27\u03a2\13\27\3\27\3\27\7\27\u03a6\n\27")
        buf.write("\f\27\16\27\u03a9\13\27\3\27\3\27\7\27\u03ad\n\27\f\27")
        buf.write("\16\27\u03b0\13\27\3\27\3\27\7\27\u03b4\n\27\f\27\16\27")
        buf.write("\u03b7\13\27\7\27\u03b9\n\27\f\27\16\27\u03bc\13\27\3")
        buf.write("\30\7\30\u03bf\n\30\f\30\16\30\u03c2\13\30\3\30\3\30\6")
        buf.write("\30\u03c6\n\30\r\30\16\30\u03c7\3\30\3\30\7\30\u03cc\n")
        buf.write("\30\f\30\16\30\u03cf\13\30\3\30\3\30\7\30\u03d3\n\30\f")
        buf.write("\30\16\30\u03d6\13\30\3\30\3\30\3\31\7\31\u03db\n\31\f")
        buf.write("\31\16\31\u03de\13\31\3\31\3\31\7\31\u03e2\n\31\f\31\16")
        buf.write("\31\u03e5\13\31\3\31\3\31\7\31\u03e9\n\31\f\31\16\31\u03ec")
        buf.write("\13\31\3\31\3\31\7\31\u03f0\n\31\f\31\16\31\u03f3\13\31")
        buf.write("\3\31\3\31\7\31\u03f7\n\31\f\31\16\31\u03fa\13\31\3\31")
        buf.write("\3\31\7\31\u03fe\n\31\f\31\16\31\u0401\13\31\3\31\3\31")
        buf.write("\7\31\u0405\n\31\f\31\16\31\u0408\13\31\3\31\3\31\3\32")
        buf.write("\7\32\u040d\n\32\f\32\16\32\u0410\13\32\3\32\3\32\7\32")
        buf.write("\u0414\n\32\f\32\16\32\u0417\13\32\3\32\3\32\7\32\u041b")
        buf.write("\n\32\f\32\16\32\u041e\13\32\3\32\3\32\3\33\7\33\u0423")
        buf.write("\n\33\f\33\16\33\u0426\13\33\3\33\3\33\6\33\u042a\n\33")
        buf.write("\r\33\16\33\u042b\3\33\3\33\3\34\7\34\u0431\n\34\f\34")
        buf.write("\16\34\u0434\13\34\3\34\3\34\6\34\u0438\n\34\r\34\16\34")
        buf.write("\u0439\3\34\3\34\7\34\u043e\n\34\f\34\16\34\u0441\13\34")
        buf.write("\3\34\3\34\6\34\u0445\n\34\r\34\16\34\u0446\3\34\3\34")
        buf.write("\7\34\u044b\n\34\f\34\16\34\u044e\13\34\3\34\3\34\6\34")
        buf.write("\u0452\n\34\r\34\16\34\u0453\3\34\5\34\u0457\n\34\3\35")
        buf.write("\3\35\3\35\6\35\u045c\n\35\r\35\16\35\u045d\3\35\5\35")
        buf.write("\u0461\n\35\3\36\3\36\3\36\3\36\3\36\5\36\u0468\n\36\3")
        buf.write("\37\7\37\u046b\n\37\f\37\16\37\u046e\13\37\3\37\3\37\6")
        buf.write("\37\u0472\n\37\r\37\16\37\u0473\3\37\3\37\7\37\u0478\n")
        buf.write("\37\f\37\16\37\u047b\13\37\3\37\3\37\7\37\u047f\n\37\f")
        buf.write("\37\16\37\u0482\13\37\3\37\3\37\3 \7 \u0487\n \f \16 ")
        buf.write("\u048a\13 \3 \3 \6 \u048e\n \r \16 \u048f\3 \3 \7 \u0494")
        buf.write("\n \f \16 \u0497\13 \3 \3 \7 \u049b\n \f \16 \u049e\13")
        buf.write(" \3 \3 \7 \u04a2\n \f \16 \u04a5\13 \3 \3 \7 \u04a9\n")
        buf.write(" \f \16 \u04ac\13 \3 \3 \3!\7!\u04b1\n!\f!\16!\u04b4\13")
        buf.write("!\3!\3!\6!\u04b8\n!\r!\16!\u04b9\3!\3!\7!\u04be\n!\f!")
        buf.write("\16!\u04c1\13!\3!\3!\7!\u04c5\n!\f!\16!\u04c8\13!\3!\3")
        buf.write("!\7!\u04cc\n!\f!\16!\u04cf\13!\3!\3!\7!\u04d3\n!\f!\16")
        buf.write("!\u04d6\13!\3!\3!\7!\u04da\n!\f!\16!\u04dd\13!\3!\3!\7")
        buf.write("!\u04e1\n!\f!\16!\u04e4\13!\3!\3!\3\"\7\"\u04e9\n\"\f")
        buf.write("\"\16\"\u04ec\13\"\3\"\3\"\6\"\u04f0\n\"\r\"\16\"\u04f1")
        buf.write("\3\"\3\"\7\"\u04f6\n\"\f\"\16\"\u04f9\13\"\3\"\3\"\7\"")
        buf.write("\u04fd\n\"\f\"\16\"\u0500\13\"\3\"\3\"\3#\7#\u0505\n#")
        buf.write("\f#\16#\u0508\13#\3#\3#\6#\u050c\n#\r#\16#\u050d\3#\3")
        buf.write("#\7#\u0512\n#\f#\16#\u0515\13#\3#\3#\7#\u0519\n#\f#\16")
        buf.write("#\u051c\13#\3#\3#\7#\u0520\n#\f#\16#\u0523\13#\3#\3#\7")
        buf.write("#\u0527\n#\f#\16#\u052a\13#\3#\3#\3$\7$\u052f\n$\f$\16")
        buf.write("$\u0532\13$\3$\3$\6$\u0536\n$\r$\16$\u0537\3$\3$\7$\u053c")
        buf.write("\n$\f$\16$\u053f\13$\3$\3$\7$\u0543\n$\f$\16$\u0546\13")
        buf.write("$\3$\3$\7$\u054a\n$\f$\16$\u054d\13$\3$\3$\7$\u0551\n")
        buf.write("$\f$\16$\u0554\13$\3$\3$\3%\7%\u0559\n%\f%\16%\u055c\13")
        buf.write("%\3%\3%\6%\u0560\n%\r%\16%\u0561\3%\3%\7%\u0566\n%\f%")
        buf.write("\16%\u0569\13%\3%\3%\7%\u056d\n%\f%\16%\u0570\13%\3%\3")
        buf.write("%\3&\7&\u0575\n&\f&\16&\u0578\13&\3&\3&\6&\u057c\n&\r")
        buf.write("&\16&\u057d\3&\3&\7&\u0582\n&\f&\16&\u0585\13&\3&\3&\7")
        buf.write("&\u0589\n&\f&\16&\u058c\13&\3&\3&\3&\7&\u0591\n&\f&\16")
        buf.write("&\u0594\13&\3&\3&\6&\u0598\n&\r&\16&\u0599\3&\3&\7&\u059e")
        buf.write("\n&\f&\16&\u05a1\13&\3&\3&\7&\u05a5\n&\f&\16&\u05a8\13")
        buf.write("&\3&\3&\5&\u05ac\n&\3\'\3\'\3\'\7\'\u05b1\n\'\f\'\16\'")
        buf.write("\u05b4\13\'\3\'\3\'\7\'\u05b8\n\'\f\'\16\'\u05bb\13\'")
        buf.write("\3\'\3\'\3\'\3\'\7\'\u05c1\n\'\f\'\16\'\u05c4\13\'\3\'")
        buf.write("\3\'\3\'\7\'\u05c9\n\'\f\'\16\'\u05cc\13\'\3\'\3\'\3\'")
        buf.write("\7\'\u05d1\n\'\f\'\16\'\u05d4\13\'\3\'\3\'\5\'\u05d8\n")
        buf.write("\'\3\'\3\'\7\'\u05dc\n\'\f\'\16\'\u05df\13\'\3\'\3\'\7")
        buf.write("\'\u05e3\n\'\f\'\16\'\u05e6\13\'\3\'\3\'\3\'\7\'\u05eb")
        buf.write("\n\'\f\'\16\'\u05ee\13\'\3\'\3\'\7\'\u05f2\n\'\f\'\16")
        buf.write("\'\u05f5\13\'\3\'\3\'\3\'\7\'\u05fa\n\'\f\'\16\'\u05fd")
        buf.write("\13\'\3\'\3\'\7\'\u0601\n\'\f\'\16\'\u0604\13\'\3\'\3")
        buf.write("\'\3\'\7\'\u0609\n\'\f\'\16\'\u060c\13\'\3\'\3\'\7\'\u0610")
        buf.write("\n\'\f\'\16\'\u0613\13\'\3\'\3\'\3\'\7\'\u0618\n\'\f\'")
        buf.write("\16\'\u061b\13\'\3\'\3\'\7\'\u061f\n\'\f\'\16\'\u0622")
        buf.write("\13\'\3\'\7\'\u0625\n\'\f\'\16\'\u0628\13\'\3(\3(\3(\5")
        buf.write("(\u062d\n(\3(\2\3L)\2\4\6\b\n\f\16\20\22\24\26\30\32\34")
        buf.write("\36 \"$&(*,.\60\62\64\668:<>@BDFHJLN\2\6\3\2/\61\3\2\63")
        buf.write("\65\4\2\62\62\66\66\4\2\35\36\67:\2\u0702\2^\3\2\2\2\4")
        buf.write("\u0093\3\2\2\2\6\u00a6\3\2\2\2\b\u00a9\3\2\2\2\n\u00ed")
        buf.write("\3\2\2\2\f\u0122\3\2\2\2\16\u013e\3\2\2\2\20\u0143\3\2")
        buf.write("\2\2\22\u016d\3\2\2\2\24\u01a5\3\2\2\2\26\u01ce\3\2\2")
        buf.write("\2\30\u01f8\3\2\2\2\32\u0214\3\2\2\2\34\u023e\3\2\2\2")
        buf.write("\36\u0268\3\2\2\2 \u0292\3\2\2\2\"\u02ae\3\2\2\2$\u02d8")
        buf.write("\3\2\2\2&\u031e\3\2\2\2(\u0356\3\2\2\2*\u0372\3\2\2\2")
        buf.write(",\u0377\3\2\2\2.\u03c0\3\2\2\2\60\u03dc\3\2\2\2\62\u040e")
        buf.write("\3\2\2\2\64\u0424\3\2\2\2\66\u0456\3\2\2\28\u0460\3\2")
        buf.write("\2\2:\u0467\3\2\2\2<\u046c\3\2\2\2>\u0488\3\2\2\2@\u04b2")
        buf.write("\3\2\2\2B\u04ea\3\2\2\2D\u0506\3\2\2\2F\u0530\3\2\2\2")
        buf.write("H\u055a\3\2\2\2J\u05ab\3\2\2\2L\u05d7\3\2\2\2N\u062c\3")
        buf.write("\2\2\2PR\7>\2\2QP\3\2\2\2RU\3\2\2\2SQ\3\2\2\2ST\3\2\2")
        buf.write("\2TV\3\2\2\2US\3\2\2\2VX\5\4\3\2WY\7\3\2\2XW\3\2\2\2Y")
        buf.write("Z\3\2\2\2ZX\3\2\2\2Z[\3\2\2\2[]\3\2\2\2\\S\3\2\2\2]`\3")
        buf.write("\2\2\2^\\\3\2\2\2^_\3\2\2\2_d\3\2\2\2`^\3\2\2\2ac\7>\2")
        buf.write("\2ba\3\2\2\2cf\3\2\2\2db\3\2\2\2de\3\2\2\2eg\3\2\2\2f")
        buf.write("d\3\2\2\2gk\5\4\3\2hj\7>\2\2ih\3\2\2\2jm\3\2\2\2ki\3\2")
        buf.write("\2\2kl\3\2\2\2l|\3\2\2\2mk\3\2\2\2np\7\3\2\2on\3\2\2\2")
        buf.write("pq\3\2\2\2qo\3\2\2\2qr\3\2\2\2rs\3\2\2\2sw\5\4\3\2tv\7")
        buf.write(">\2\2ut\3\2\2\2vy\3\2\2\2wu\3\2\2\2wx\3\2\2\2x{\3\2\2")
        buf.write("\2yw\3\2\2\2zo\3\2\2\2{~\3\2\2\2|z\3\2\2\2|}\3\2\2\2}")
        buf.write("\177\3\2\2\2~|\3\2\2\2\177\u0080\7\2\2\3\u0080\3\3\2\2")
        buf.write("\2\u0081\u0094\5\60\31\2\u0082\u0094\5\62\32\2\u0083\u0094")
        buf.write("\5\16\b\2\u0084\u0094\5.\30\2\u0085\u0094\5\64\33\2\u0086")
        buf.write("\u0094\5:\36\2\u0087\u0094\5,\27\2\u0088\u0094\5\b\5\2")
        buf.write("\u0089\u0094\5\n\6\2\u008a\u0094\5J&\2\u008b\u0094\5\66")
        buf.write("\34\2\u008c\u0094\58\35\2\u008d\u008f\7>\2\2\u008e\u008d")
        buf.write("\3\2\2\2\u008f\u0092\3\2\2\2\u0090\u008e\3\2\2\2\u0090")
        buf.write("\u0091\3\2\2\2\u0091\u0094\3\2\2\2\u0092\u0090\3\2\2\2")
        buf.write("\u0093\u0081\3\2\2\2\u0093\u0082\3\2\2\2\u0093\u0083\3")
        buf.write("\2\2\2\u0093\u0084\3\2\2\2\u0093\u0085\3\2\2\2\u0093\u0086")
        buf.write("\3\2\2\2\u0093\u0087\3\2\2\2\u0093\u0088\3\2\2\2\u0093")
        buf.write("\u0089\3\2\2\2\u0093\u008a\3\2\2\2\u0093\u008b\3\2\2\2")
        buf.write("\u0093\u008c\3\2\2\2\u0093\u0090\3\2\2\2\u0094\5\3\2\2")
        buf.write("\2\u0095\u0097\7>\2\2\u0096\u0095\3\2\2\2\u0097\u009a")
        buf.write("\3\2\2\2\u0098\u0096\3\2\2\2\u0098\u0099\3\2\2\2\u0099")
        buf.write("\u009b\3\2\2\2\u009a\u0098\3\2\2\2\u009b\u009f\5\4\3\2")
        buf.write("\u009c\u009e\7>\2\2\u009d\u009c\3\2\2\2\u009e\u00a1\3")
        buf.write("\2\2\2\u009f\u009d\3\2\2\2\u009f\u00a0\3\2\2\2\u00a0\u00a2")
        buf.write("\3\2\2\2\u00a1\u009f\3\2\2\2\u00a2\u00a3\7\3\2\2\u00a3")
        buf.write("\u00a5\3\2\2\2\u00a4\u0098\3\2\2\2\u00a5\u00a8\3\2\2\2")
        buf.write("\u00a6\u00a4\3\2\2\2\u00a6\u00a7\3\2\2\2\u00a7\7\3\2\2")
        buf.write("\2\u00a8\u00a6\3\2\2\2\u00a9\u00ab\7\4\2\2\u00aa\u00ac")
        buf.write("\7>\2\2\u00ab\u00aa\3\2\2\2\u00ac\u00ad\3\2\2\2\u00ad")
        buf.write("\u00ab\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\u00af\3\2\2\2")
        buf.write("\u00af\u00b1\7K\2\2\u00b0\u00b2\7>\2\2\u00b1\u00b0\3\2")
        buf.write("\2\2\u00b2\u00b3\3\2\2\2\u00b3\u00b1\3\2\2\2\u00b3\u00b4")
        buf.write("\3\2\2\2\u00b4\u00b5\3\2\2\2\u00b5\u00b7\7\5\2\2\u00b6")
        buf.write("\u00b8\7>\2\2\u00b7\u00b6\3\2\2\2\u00b8\u00b9\3\2\2\2")
        buf.write("\u00b9\u00b7\3\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00bb\3")
        buf.write("\2\2\2\u00bb\u00bd\5L\'\2\u00bc\u00be\7>\2\2\u00bd\u00bc")
        buf.write("\3\2\2\2\u00be\u00bf\3\2\2\2\u00bf\u00bd\3\2\2\2\u00bf")
        buf.write("\u00c0\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1\u00c3\7\6\2\2")
        buf.write("\u00c2\u00c4\7>\2\2\u00c3\u00c2\3\2\2\2\u00c4\u00c5\3")
        buf.write("\2\2\2\u00c5\u00c3\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\u00c7")
        buf.write("\3\2\2\2\u00c7\u00c9\5L\'\2\u00c8\u00ca\7>\2\2\u00c9\u00c8")
        buf.write("\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00c9\3\2\2\2\u00cb")
        buf.write("\u00cc\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00cf\7\7\2\2")
        buf.write("\u00ce\u00d0\7>\2\2\u00cf\u00ce\3\2\2\2\u00d0\u00d1\3")
        buf.write("\2\2\2\u00d1\u00cf\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d3")
        buf.write("\3\2\2\2\u00d3\u00d5\5L\'\2\u00d4\u00d6\7>\2\2\u00d5\u00d4")
        buf.write("\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00d5\3\2\2\2\u00d7")
        buf.write("\u00d8\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00dd\7\b\2\2")
        buf.write("\u00da\u00dc\7>\2\2\u00db\u00da\3\2\2\2\u00dc\u00df\3")
        buf.write("\2\2\2\u00dd\u00db\3\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00e0")
        buf.write("\3\2\2\2\u00df\u00dd\3\2\2\2\u00e0\u00e1\7\3\2\2\u00e1")
        buf.write("\u00e5\5\6\4\2\u00e2\u00e4\7>\2\2\u00e3\u00e2\3\2\2\2")
        buf.write("\u00e4\u00e7\3\2\2\2\u00e5\u00e3\3\2\2\2\u00e5\u00e6\3")
        buf.write("\2\2\2\u00e6\u00e8\3\2\2\2\u00e7\u00e5\3\2\2\2\u00e8\u00e9")
        buf.write("\7\t\2\2\u00e9\t\3\2\2\2\u00ea\u00ec\7>\2\2\u00eb\u00ea")
        buf.write("\3\2\2\2\u00ec\u00ef\3\2\2\2\u00ed\u00eb\3\2\2\2\u00ed")
        buf.write("\u00ee\3\2\2\2\u00ee\u00f0\3\2\2\2\u00ef\u00ed\3\2\2\2")
        buf.write("\u00f0\u00f2\7\n\2\2\u00f1\u00f3\7>\2\2\u00f2\u00f1\3")
        buf.write("\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f2\3\2\2\2\u00f4\u00f5")
        buf.write("\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u0106\5\f\7\2\u00f7")
        buf.write("\u00f9\7\13\2\2\u00f8\u00fa\7>\2\2\u00f9\u00f8\3\2\2\2")
        buf.write("\u00fa\u00fb\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fb\u00fc\3")
        buf.write("\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00ff\7\n\2\2\u00fe\u0100")
        buf.write("\7>\2\2\u00ff\u00fe\3\2\2\2\u0100\u0101\3\2\2\2\u0101")
        buf.write("\u00ff\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0103\3\2\2\2")
        buf.write("\u0103\u0105\5\f\7\2\u0104\u00f7\3\2\2\2\u0105\u0108\3")
        buf.write("\2\2\2\u0106\u0104\3\2\2\2\u0106\u0107\3\2\2\2\u0107\u010c")
        buf.write("\3\2\2\2\u0108\u0106\3\2\2\2\u0109\u010b\7>\2\2\u010a")
        buf.write("\u0109\3\2\2\2\u010b\u010e\3\2\2\2\u010c\u010a\3\2\2\2")
        buf.write("\u010c\u010d\3\2\2\2\u010d\u0118\3\2\2\2\u010e\u010c\3")
        buf.write("\2\2\2\u010f\u0111\7\13\2\2\u0110\u0112\7>\2\2\u0111\u0110")
        buf.write("\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0111\3\2\2\2\u0113")
        buf.write("\u0114\3\2\2\2\u0114\u0115\3\2\2\2\u0115\u0116\7\b\2\2")
        buf.write("\u0116\u0117\7\3\2\2\u0117\u0119\5\6\4\2\u0118\u010f\3")
        buf.write("\2\2\2\u0118\u0119\3\2\2\2\u0119\u011d\3\2\2\2\u011a\u011c")
        buf.write("\7>\2\2\u011b\u011a\3\2\2\2\u011c\u011f\3\2\2\2\u011d")
        buf.write("\u011b\3\2\2\2\u011d\u011e\3\2\2\2\u011e\u0120\3\2\2\2")
        buf.write("\u011f\u011d\3\2\2\2\u0120\u0121\7\t\2\2\u0121\13\3\2")
        buf.write("\2\2\u0122\u0124\5L\'\2\u0123\u0125\7>\2\2\u0124\u0123")
        buf.write("\3\2\2\2\u0125\u0126\3\2\2\2\u0126\u0124\3\2\2\2\u0126")
        buf.write("\u0127\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u0129\7\b\2\2")
        buf.write("\u0129\u012d\7\3\2\2\u012a\u012c\7>\2\2\u012b\u012a\3")
        buf.write("\2\2\2\u012c\u012f\3\2\2\2\u012d\u012b\3\2\2\2\u012d\u012e")
        buf.write("\3\2\2\2\u012e\u0130\3\2\2\2\u012f\u012d\3\2\2\2\u0130")
        buf.write("\u0131\5\6\4\2\u0131\r\3\2\2\2\u0132\u013f\5\20\t\2\u0133")
        buf.write("\u013f\5\22\n\2\u0134\u013f\5\24\13\2\u0135\u013f\5\26")
        buf.write("\f\2\u0136\u013f\5\30\r\2\u0137\u013f\5\32\16\2\u0138")
        buf.write("\u013f\5\34\17\2\u0139\u013f\5\36\20\2\u013a\u013f\5 ")
        buf.write("\21\2\u013b\u013f\5\"\22\2\u013c\u013f\5$\23\2\u013d\u013f")
        buf.write("\5&\24\2\u013e\u0132\3\2\2\2\u013e\u0133\3\2\2\2\u013e")
        buf.write("\u0134\3\2\2\2\u013e\u0135\3\2\2\2\u013e\u0136\3\2\2\2")
        buf.write("\u013e\u0137\3\2\2\2\u013e\u0138\3\2\2\2\u013e\u0139\3")
        buf.write("\2\2\2\u013e\u013a\3\2\2\2\u013e\u013b\3\2\2\2\u013e\u013c")
        buf.write("\3\2\2\2\u013e\u013d\3\2\2\2\u013f\17\3\2\2\2\u0140\u0142")
        buf.write("\7>\2\2\u0141\u0140\3\2\2\2\u0142\u0145\3\2\2\2\u0143")
        buf.write("\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0146\3\2\2\2")
        buf.write("\u0145\u0143\3\2\2\2\u0146\u0148\7\f\2\2\u0147\u0149\7")
        buf.write(">\2\2\u0148\u0147\3\2\2\2\u0149\u014a\3\2\2\2\u014a\u0148")
        buf.write("\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014c\3\2\2\2\u014c")
        buf.write("\u0150\7K\2\2\u014d\u014f\7>\2\2\u014e\u014d\3\2\2\2\u014f")
        buf.write("\u0152\3\2\2\2\u0150\u014e\3\2\2\2\u0150\u0151\3\2\2\2")
        buf.write("\u0151\u0153\3\2\2\2\u0152\u0150\3\2\2\2\u0153\u0157\7")
        buf.write("\r\2\2\u0154\u0156\7>\2\2\u0155\u0154\3\2\2\2\u0156\u0159")
        buf.write("\3\2\2\2\u0157\u0155\3\2\2\2\u0157\u0158\3\2\2\2\u0158")
        buf.write("\u015a\3\2\2\2\u0159\u0157\3\2\2\2\u015a\u015e\5L\'\2")
        buf.write("\u015b\u015d\7>\2\2\u015c\u015b\3\2\2\2\u015d\u0160\3")
        buf.write("\2\2\2\u015e\u015c\3\2\2\2\u015e\u015f\3\2\2\2\u015f\u0161")
        buf.write("\3\2\2\2\u0160\u015e\3\2\2\2\u0161\u0165\7\16\2\2\u0162")
        buf.write("\u0164\7>\2\2\u0163\u0162\3\2\2\2\u0164\u0167\3\2\2\2")
        buf.write("\u0165\u0163\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0168\3")
        buf.write("\2\2\2\u0167\u0165\3\2\2\2\u0168\u0169\5L\'\2\u0169\21")
        buf.write("\3\2\2\2\u016a\u016c\7>\2\2\u016b\u016a\3\2\2\2\u016c")
        buf.write("\u016f\3\2\2\2\u016d\u016b\3\2\2\2\u016d\u016e\3\2\2\2")
        buf.write("\u016e\u0170\3\2\2\2\u016f\u016d\3\2\2\2\u0170\u0172\7")
        buf.write("\17\2\2\u0171\u0173\7>\2\2\u0172\u0171\3\2\2\2\u0173\u0174")
        buf.write("\3\2\2\2\u0174\u0172\3\2\2\2\u0174\u0175\3\2\2\2\u0175")
        buf.write("\u0176\3\2\2\2\u0176\u017a\7K\2\2\u0177\u0179\7>\2\2\u0178")
        buf.write("\u0177\3\2\2\2\u0179\u017c\3\2\2\2\u017a\u0178\3\2\2\2")
        buf.write("\u017a\u017b\3\2\2\2\u017b\u017d\3\2\2\2\u017c\u017a\3")
        buf.write("\2\2\2\u017d\u0181\7\r\2\2\u017e\u0180\7>\2\2\u017f\u017e")
        buf.write("\3\2\2\2\u0180\u0183\3\2\2\2\u0181\u017f\3\2\2\2\u0181")
        buf.write("\u0182\3\2\2\2\u0182\u0184\3\2\2\2\u0183\u0181\3\2\2\2")
        buf.write("\u0184\u0188\5L\'\2\u0185\u0187\7>\2\2\u0186\u0185\3\2")
        buf.write("\2\2\u0187\u018a\3\2\2\2\u0188\u0186\3\2\2\2\u0188\u0189")
        buf.write("\3\2\2\2\u0189\u018b\3\2\2\2\u018a\u0188\3\2\2\2\u018b")
        buf.write("\u018f\7\16\2\2\u018c\u018e\7>\2\2\u018d\u018c\3\2\2\2")
        buf.write("\u018e\u0191\3\2\2\2\u018f\u018d\3\2\2\2\u018f\u0190\3")
        buf.write("\2\2\2\u0190\u0192\3\2\2\2\u0191\u018f\3\2\2\2\u0192\u0196")
        buf.write("\5L\'\2\u0193\u0195\7>\2\2\u0194\u0193\3\2\2\2\u0195\u0198")
        buf.write("\3\2\2\2\u0196\u0194\3\2\2\2\u0196\u0197\3\2\2\2\u0197")
        buf.write("\u0199\3\2\2\2\u0198\u0196\3\2\2\2\u0199\u019d\7\16\2")
        buf.write("\2\u019a\u019c\7>\2\2\u019b\u019a\3\2\2\2\u019c\u019f")
        buf.write("\3\2\2\2\u019d\u019b\3\2\2\2\u019d\u019e\3\2\2\2\u019e")
        buf.write("\u01a0\3\2\2\2\u019f\u019d\3\2\2\2\u01a0\u01a1\5L\'\2")
        buf.write("\u01a1\23\3\2\2\2\u01a2\u01a4\7>\2\2\u01a3\u01a2\3\2\2")
        buf.write("\2\u01a4\u01a7\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a5\u01a6")
        buf.write("\3\2\2\2\u01a6\u01a8\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a8")
        buf.write("\u01aa\7\20\2\2\u01a9\u01ab\7>\2\2\u01aa\u01a9\3\2\2\2")
        buf.write("\u01ab\u01ac\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ac\u01ad\3")
        buf.write("\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01b2\7K\2\2\u01af\u01b1")
        buf.write("\7>\2\2\u01b0\u01af\3\2\2\2\u01b1\u01b4\3\2\2\2\u01b2")
        buf.write("\u01b0\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b5\3\2\2\2")
        buf.write("\u01b4\u01b2\3\2\2\2\u01b5\u01b9\7\r\2\2\u01b6\u01b8\7")
        buf.write(">\2\2\u01b7\u01b6\3\2\2\2\u01b8\u01bb\3\2\2\2\u01b9\u01b7")
        buf.write("\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01bc\3\2\2\2\u01bb")
        buf.write("\u01b9\3\2\2\2\u01bc\u01c0\7K\2\2\u01bd\u01bf\7>\2\2\u01be")
        buf.write("\u01bd\3\2\2\2\u01bf\u01c2\3\2\2\2\u01c0\u01be\3\2\2\2")
        buf.write("\u01c0\u01c1\3\2\2\2\u01c1\u01c3\3\2\2\2\u01c2\u01c0\3")
        buf.write("\2\2\2\u01c3\u01c5\7\16\2\2\u01c4\u01c6\7>\2\2\u01c5\u01c4")
        buf.write("\3\2\2\2\u01c6\u01c7\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c7")
        buf.write("\u01c8\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01ca\7K\2\2")
        buf.write("\u01ca\25\3\2\2\2\u01cb\u01cd\7>\2\2\u01cc\u01cb\3\2\2")
        buf.write("\2\u01cd\u01d0\3\2\2\2\u01ce\u01cc\3\2\2\2\u01ce\u01cf")
        buf.write("\3\2\2\2\u01cf\u01d1\3\2\2\2\u01d0\u01ce\3\2\2\2\u01d1")
        buf.write("\u01d3\7\21\2\2\u01d2\u01d4\7>\2\2\u01d3\u01d2\3\2\2\2")
        buf.write("\u01d4\u01d5\3\2\2\2\u01d5\u01d3\3\2\2\2\u01d5\u01d6\3")
        buf.write("\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01db\7K\2\2\u01d8\u01da")
        buf.write("\7>\2\2\u01d9\u01d8\3\2\2\2\u01da\u01dd\3\2\2\2\u01db")
        buf.write("\u01d9\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc\u01de\3\2\2\2")
        buf.write("\u01dd\u01db\3\2\2\2\u01de\u01e2\7\r\2\2\u01df\u01e1\7")
        buf.write(">\2\2\u01e0\u01df\3\2\2\2\u01e1\u01e4\3\2\2\2\u01e2\u01e0")
        buf.write("\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e5\3\2\2\2\u01e4")
        buf.write("\u01e2\3\2\2\2\u01e5\u01e9\7K\2\2\u01e6\u01e8\7>\2\2\u01e7")
        buf.write("\u01e6\3\2\2\2\u01e8\u01eb\3\2\2\2\u01e9\u01e7\3\2\2\2")
        buf.write("\u01e9\u01ea\3\2\2\2\u01ea\u01ec\3\2\2\2\u01eb\u01e9\3")
        buf.write("\2\2\2\u01ec\u01f0\7\16\2\2\u01ed\u01ef\7>\2\2\u01ee\u01ed")
        buf.write("\3\2\2\2\u01ef\u01f2\3\2\2\2\u01f0\u01ee\3\2\2\2\u01f0")
        buf.write("\u01f1\3\2\2\2\u01f1\u01f3\3\2\2\2\u01f2\u01f0\3\2\2\2")
        buf.write("\u01f3\u01f4\5L\'\2\u01f4\27\3\2\2\2\u01f5\u01f7\7>\2")
        buf.write("\2\u01f6\u01f5\3\2\2\2\u01f7\u01fa\3\2\2\2\u01f8\u01f6")
        buf.write("\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\u01fb\3\2\2\2\u01fa")
        buf.write("\u01f8\3\2\2\2\u01fb\u01fd\7\22\2\2\u01fc\u01fe\7>\2\2")
        buf.write("\u01fd\u01fc\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u01fd\3")
        buf.write("\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0205")
        buf.write("\7K\2\2\u0202\u0204\7>\2\2\u0203\u0202\3\2\2\2\u0204\u0207")
        buf.write("\3\2\2\2\u0205\u0203\3\2\2\2\u0205\u0206\3\2\2\2\u0206")
        buf.write("\u0208\3\2\2\2\u0207\u0205\3\2\2\2\u0208\u020c\7\r\2\2")
        buf.write("\u0209\u020b\7>\2\2\u020a\u0209\3\2\2\2\u020b\u020e\3")
        buf.write("\2\2\2\u020c\u020a\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u020f")
        buf.write("\3\2\2\2\u020e\u020c\3\2\2\2\u020f\u0210\7K\2\2\u0210")
        buf.write("\31\3\2\2\2\u0211\u0213\7>\2\2\u0212\u0211\3\2\2\2\u0213")
        buf.write("\u0216\3\2\2\2\u0214\u0212\3\2\2\2\u0214\u0215\3\2\2\2")
        buf.write("\u0215\u0217\3\2\2\2\u0216\u0214\3\2\2\2\u0217\u0219\7")
        buf.write("\23\2\2\u0218\u021a\7>\2\2\u0219\u0218\3\2\2\2\u021a\u021b")
        buf.write("\3\2\2\2\u021b\u0219\3\2\2\2\u021b\u021c\3\2\2\2\u021c")
        buf.write("\u021d\3\2\2\2\u021d\u0221\7K\2\2\u021e\u0220\7>\2\2\u021f")
        buf.write("\u021e\3\2\2\2\u0220\u0223\3\2\2\2\u0221\u021f\3\2\2\2")
        buf.write("\u0221\u0222\3\2\2\2\u0222\u0224\3\2\2\2\u0223\u0221\3")
        buf.write("\2\2\2\u0224\u0228\7\r\2\2\u0225\u0227\7>\2\2\u0226\u0225")
        buf.write("\3\2\2\2\u0227\u022a\3\2\2\2\u0228\u0226\3\2\2\2\u0228")
        buf.write("\u0229\3\2\2\2\u0229\u022b\3\2\2\2\u022a\u0228\3\2\2\2")
        buf.write("\u022b\u022f\7K\2\2\u022c\u022e\7>\2\2\u022d\u022c\3\2")
        buf.write("\2\2\u022e\u0231\3\2\2\2\u022f\u022d\3\2\2\2\u022f\u0230")
        buf.write("\3\2\2\2\u0230\u0232\3\2\2\2\u0231\u022f\3\2\2\2\u0232")
        buf.write("\u0236\7\16\2\2\u0233\u0235\7>\2\2\u0234\u0233\3\2\2\2")
        buf.write("\u0235\u0238\3\2\2\2\u0236\u0234\3\2\2\2\u0236\u0237\3")
        buf.write("\2\2\2\u0237\u0239\3\2\2\2\u0238\u0236\3\2\2\2\u0239\u023a")
        buf.write("\7K\2\2\u023a\33\3\2\2\2\u023b\u023d\7>\2\2\u023c\u023b")
        buf.write("\3\2\2\2\u023d\u0240\3\2\2\2\u023e\u023c\3\2\2\2\u023e")
        buf.write("\u023f\3\2\2\2\u023f\u0241\3\2\2\2\u0240\u023e\3\2\2\2")
        buf.write("\u0241\u0243\7\24\2\2\u0242\u0244\7>\2\2\u0243\u0242\3")
        buf.write("\2\2\2\u0244\u0245\3\2\2\2\u0245\u0243\3\2\2\2\u0245\u0246")
        buf.write("\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u024b\7K\2\2\u0248")
        buf.write("\u024a\7>\2\2\u0249\u0248\3\2\2\2\u024a\u024d\3\2\2\2")
        buf.write("\u024b\u0249\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024e\3")
        buf.write("\2\2\2\u024d\u024b\3\2\2\2\u024e\u0252\7\r\2\2\u024f\u0251")
        buf.write("\7>\2\2\u0250\u024f\3\2\2\2\u0251\u0254\3\2\2\2\u0252")
        buf.write("\u0250\3\2\2\2\u0252\u0253\3\2\2\2\u0253\u0255\3\2\2\2")
        buf.write("\u0254\u0252\3\2\2\2\u0255\u0259\7K\2\2\u0256\u0258\7")
        buf.write(">\2\2\u0257\u0256\3\2\2\2\u0258\u025b\3\2\2\2\u0259\u0257")
        buf.write("\3\2\2\2\u0259\u025a\3\2\2\2\u025a\u025c\3\2\2\2\u025b")
        buf.write("\u0259\3\2\2\2\u025c\u0260\7\16\2\2\u025d\u025f\7>\2\2")
        buf.write("\u025e\u025d\3\2\2\2\u025f\u0262\3\2\2\2\u0260\u025e\3")
        buf.write("\2\2\2\u0260\u0261\3\2\2\2\u0261\u0263\3\2\2\2\u0262\u0260")
        buf.write("\3\2\2\2\u0263\u0264\5L\'\2\u0264\35\3\2\2\2\u0265\u0267")
        buf.write("\7>\2\2\u0266\u0265\3\2\2\2\u0267\u026a\3\2\2\2\u0268")
        buf.write("\u0266\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026b\3\2\2\2")
        buf.write("\u026a\u0268\3\2\2\2\u026b\u026d\7\25\2\2\u026c\u026e")
        buf.write("\7>\2\2\u026d\u026c\3\2\2\2\u026e\u026f\3\2\2\2\u026f")
        buf.write("\u026d\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0271\3\2\2\2")
        buf.write("\u0271\u0275\7K\2\2\u0272\u0274\7>\2\2\u0273\u0272\3\2")
        buf.write("\2\2\u0274\u0277\3\2\2\2\u0275\u0273\3\2\2\2\u0275\u0276")
        buf.write("\3\2\2\2\u0276\u0278\3\2\2\2\u0277\u0275\3\2\2\2\u0278")
        buf.write("\u027c\7\r\2\2\u0279\u027b\7>\2\2\u027a\u0279\3\2\2\2")
        buf.write("\u027b\u027e\3\2\2\2\u027c\u027a\3\2\2\2\u027c\u027d\3")
        buf.write("\2\2\2\u027d\u027f\3\2\2\2\u027e\u027c\3\2\2\2\u027f\u0283")
        buf.write("\7K\2\2\u0280\u0282\7>\2\2\u0281\u0280\3\2\2\2\u0282\u0285")
        buf.write("\3\2\2\2\u0283\u0281\3\2\2\2\u0283\u0284\3\2\2\2\u0284")
        buf.write("\u0286\3\2\2\2\u0285\u0283\3\2\2\2\u0286\u028a\7\16\2")
        buf.write("\2\u0287\u0289\7>\2\2\u0288\u0287\3\2\2\2\u0289\u028c")
        buf.write("\3\2\2\2\u028a\u0288\3\2\2\2\u028a\u028b\3\2\2\2\u028b")
        buf.write("\u028d\3\2\2\2\u028c\u028a\3\2\2\2\u028d\u028e\7K\2\2")
        buf.write("\u028e\37\3\2\2\2\u028f\u0291\7>\2\2\u0290\u028f\3\2\2")
        buf.write("\2\u0291\u0294\3\2\2\2\u0292\u0290\3\2\2\2\u0292\u0293")
        buf.write("\3\2\2\2\u0293\u0295\3\2\2\2\u0294\u0292\3\2\2\2\u0295")
        buf.write("\u0297\7\26\2\2\u0296\u0298\7>\2\2\u0297\u0296\3\2\2\2")
        buf.write("\u0298\u0299\3\2\2\2\u0299\u0297\3\2\2\2\u0299\u029a\3")
        buf.write("\2\2\2\u029a\u029b\3\2\2\2\u029b\u029f\7K\2\2\u029c\u029e")
        buf.write("\7>\2\2\u029d\u029c\3\2\2\2\u029e\u02a1\3\2\2\2\u029f")
        buf.write("\u029d\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u02a2\3\2\2\2")
        buf.write("\u02a1\u029f\3\2\2\2\u02a2\u02a6\7\r\2\2\u02a3\u02a5\7")
        buf.write(">\2\2\u02a4\u02a3\3\2\2\2\u02a5\u02a8\3\2\2\2\u02a6\u02a4")
        buf.write("\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a9\3\2\2\2\u02a8")
        buf.write("\u02a6\3\2\2\2\u02a9\u02aa\7K\2\2\u02aa!\3\2\2\2\u02ab")
        buf.write("\u02ad\7>\2\2\u02ac\u02ab\3\2\2\2\u02ad\u02b0\3\2\2\2")
        buf.write("\u02ae\u02ac\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b1\3")
        buf.write("\2\2\2\u02b0\u02ae\3\2\2\2\u02b1\u02b3\7\27\2\2\u02b2")
        buf.write("\u02b4\7>\2\2\u02b3\u02b2\3\2\2\2\u02b4\u02b5\3\2\2\2")
        buf.write("\u02b5\u02b3\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b7\3")
        buf.write("\2\2\2\u02b7\u02bb\7K\2\2\u02b8\u02ba\7>\2\2\u02b9\u02b8")
        buf.write("\3\2\2\2\u02ba\u02bd\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bb")
        buf.write("\u02bc\3\2\2\2\u02bc\u02be\3\2\2\2\u02bd\u02bb\3\2\2\2")
        buf.write("\u02be\u02c2\7\r\2\2\u02bf\u02c1\7>\2\2\u02c0\u02bf\3")
        buf.write("\2\2\2\u02c1\u02c4\3\2\2\2\u02c2\u02c0\3\2\2\2\u02c2\u02c3")
        buf.write("\3\2\2\2\u02c3\u02c5\3\2\2\2\u02c4\u02c2\3\2\2\2\u02c5")
        buf.write("\u02c9\7K\2\2\u02c6\u02c8\7>\2\2\u02c7\u02c6\3\2\2\2\u02c8")
        buf.write("\u02cb\3\2\2\2\u02c9\u02c7\3\2\2\2\u02c9\u02ca\3\2\2\2")
        buf.write("\u02ca\u02cc\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cc\u02d0\7")
        buf.write("\16\2\2\u02cd\u02cf\7>\2\2\u02ce\u02cd\3\2\2\2\u02cf\u02d2")
        buf.write("\3\2\2\2\u02d0\u02ce\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1")
        buf.write("\u02d3\3\2\2\2\u02d2\u02d0\3\2\2\2\u02d3\u02d4\7K\2\2")
        buf.write("\u02d4#\3\2\2\2\u02d5\u02d7\7>\2\2\u02d6\u02d5\3\2\2\2")
        buf.write("\u02d7\u02da\3\2\2\2\u02d8\u02d6\3\2\2\2\u02d8\u02d9\3")
        buf.write("\2\2\2\u02d9\u02db\3\2\2\2\u02da\u02d8\3\2\2\2\u02db\u02dd")
        buf.write("\7\30\2\2\u02dc\u02de\7>\2\2\u02dd\u02dc\3\2\2\2\u02de")
        buf.write("\u02df\3\2\2\2\u02df\u02dd\3\2\2\2\u02df\u02e0\3\2\2\2")
        buf.write("\u02e0\u02e1\3\2\2\2\u02e1\u02e5\7K\2\2\u02e2\u02e4\7")
        buf.write(">\2\2\u02e3\u02e2\3\2\2\2\u02e4\u02e7\3\2\2\2\u02e5\u02e3")
        buf.write("\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e8\3\2\2\2\u02e7")
        buf.write("\u02e5\3\2\2\2\u02e8\u02ec\7\r\2\2\u02e9\u02eb\7>\2\2")
        buf.write("\u02ea\u02e9\3\2\2\2\u02eb\u02ee\3\2\2\2\u02ec\u02ea\3")
        buf.write("\2\2\2\u02ec\u02ed\3\2\2\2\u02ed\u02ef\3\2\2\2\u02ee\u02ec")
        buf.write("\3\2\2\2\u02ef\u02f3\7K\2\2\u02f0\u02f2\7>\2\2\u02f1\u02f0")
        buf.write("\3\2\2\2\u02f2\u02f5\3\2\2\2\u02f3\u02f1\3\2\2\2\u02f3")
        buf.write("\u02f4\3\2\2\2\u02f4\u02f6\3\2\2\2\u02f5\u02f3\3\2\2\2")
        buf.write("\u02f6\u02fa\7\16\2\2\u02f7\u02f9\7>\2\2\u02f8\u02f7\3")
        buf.write("\2\2\2\u02f9\u02fc\3\2\2\2\u02fa\u02f8\3\2\2\2\u02fa\u02fb")
        buf.write("\3\2\2\2\u02fb\u02fd\3\2\2\2\u02fc\u02fa\3\2\2\2\u02fd")
        buf.write("\u0301\7K\2\2\u02fe\u0300\7>\2\2\u02ff\u02fe\3\2\2\2\u0300")
        buf.write("\u0303\3\2\2\2\u0301\u02ff\3\2\2\2\u0301\u0302\3\2\2\2")
        buf.write("\u0302\u0304\3\2\2\2\u0303\u0301\3\2\2\2\u0304\u0308\7")
        buf.write("\16\2\2\u0305\u0307\7>\2\2\u0306\u0305\3\2\2\2\u0307\u030a")
        buf.write("\3\2\2\2\u0308\u0306\3\2\2\2\u0308\u0309\3\2\2\2\u0309")
        buf.write("\u030b\3\2\2\2\u030a\u0308\3\2\2\2\u030b\u030f\5L\'\2")
        buf.write("\u030c\u030e\7>\2\2\u030d\u030c\3\2\2\2\u030e\u0311\3")
        buf.write("\2\2\2\u030f\u030d\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0312")
        buf.write("\3\2\2\2\u0311\u030f\3\2\2\2\u0312\u0316\7\16\2\2\u0313")
        buf.write("\u0315\7>\2\2\u0314\u0313\3\2\2\2\u0315\u0318\3\2\2\2")
        buf.write("\u0316\u0314\3\2\2\2\u0316\u0317\3\2\2\2\u0317\u0319\3")
        buf.write("\2\2\2\u0318\u0316\3\2\2\2\u0319\u031a\5L\'\2\u031a%\3")
        buf.write("\2\2\2\u031b\u031d\7>\2\2\u031c\u031b\3\2\2\2\u031d\u0320")
        buf.write("\3\2\2\2\u031e\u031c\3\2\2\2\u031e\u031f\3\2\2\2\u031f")
        buf.write("\u0321\3\2\2\2\u0320\u031e\3\2\2\2\u0321\u0323\7\31\2")
        buf.write("\2\u0322\u0324\7>\2\2\u0323\u0322\3\2\2\2\u0324\u0325")
        buf.write("\3\2\2\2\u0325\u0323\3\2\2\2\u0325\u0326\3\2\2\2\u0326")
        buf.write("\u0327\3\2\2\2\u0327\u032b\7K\2\2\u0328\u032a\7>\2\2\u0329")
        buf.write("\u0328\3\2\2\2\u032a\u032d\3\2\2\2\u032b\u0329\3\2\2\2")
        buf.write("\u032b\u032c\3\2\2\2\u032c\u032e\3\2\2\2\u032d\u032b\3")
        buf.write("\2\2\2\u032e\u0332\7\r\2\2\u032f\u0331\7>\2\2\u0330\u032f")
        buf.write("\3\2\2\2\u0331\u0334\3\2\2\2\u0332\u0330\3\2\2\2\u0332")
        buf.write("\u0333\3\2\2\2\u0333\u0335\3\2\2\2\u0334\u0332\3\2\2\2")
        buf.write("\u0335\u0339\7K\2\2\u0336\u0338\7>\2\2\u0337\u0336\3\2")
        buf.write("\2\2\u0338\u033b\3\2\2\2\u0339\u0337\3\2\2\2\u0339\u033a")
        buf.write("\3\2\2\2\u033a\u033c\3\2\2\2\u033b\u0339\3\2\2\2\u033c")
        buf.write("\u0340\7\16\2\2\u033d\u033f\7>\2\2\u033e\u033d\3\2\2\2")
        buf.write("\u033f\u0342\3\2\2\2\u0340\u033e\3\2\2\2\u0340\u0341\3")
        buf.write("\2\2\2\u0341\u0343\3\2\2\2\u0342\u0340\3\2\2\2\u0343\u0347")
        buf.write("\7K\2\2\u0344\u0346\7>\2\2\u0345\u0344\3\2\2\2\u0346\u0349")
        buf.write("\3\2\2\2\u0347\u0345\3\2\2\2\u0347\u0348\3\2\2\2\u0348")
        buf.write("\u034a\3\2\2\2\u0349\u0347\3\2\2\2\u034a\u034e\7\16\2")
        buf.write("\2\u034b\u034d\7>\2\2\u034c\u034b\3\2\2\2\u034d\u0350")
        buf.write("\3\2\2\2\u034e\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f")
        buf.write("\u0351\3\2\2\2\u0350\u034e\3\2\2\2\u0351\u0352\5L\'\2")
        buf.write("\u0352\'\3\2\2\2\u0353\u0355\7>\2\2\u0354\u0353\3\2\2")
        buf.write("\2\u0355\u0358\3\2\2\2\u0356\u0354\3\2\2\2\u0356\u0357")
        buf.write("\3\2\2\2\u0357\u0359\3\2\2\2\u0358\u0356\3\2\2\2\u0359")
        buf.write("\u035d\7K\2\2\u035a\u035c\7>\2\2\u035b\u035a\3\2\2\2\u035c")
        buf.write("\u035f\3\2\2\2\u035d\u035b\3\2\2\2\u035d\u035e\3\2\2\2")
        buf.write("\u035e\u0360\3\2\2\2\u035f\u035d\3\2\2\2\u0360\u0364\7")
        buf.write("\32\2\2\u0361\u0363\7>\2\2\u0362\u0361\3\2\2\2\u0363\u0366")
        buf.write("\3\2\2\2\u0364\u0362\3\2\2\2\u0364\u0365\3\2\2\2\u0365")
        buf.write("\u0367\3\2\2\2\u0366\u0364\3\2\2\2\u0367\u036b\5L\'\2")
        buf.write("\u0368\u036a\7>\2\2\u0369\u0368\3\2\2\2\u036a\u036d\3")
        buf.write("\2\2\2\u036b\u0369\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u036e")
        buf.write("\3\2\2\2\u036d\u036b\3\2\2\2\u036e\u036f\7\33\2\2\u036f")
        buf.write(")\3\2\2\2\u0370\u0373\7K\2\2\u0371\u0373\5(\25\2\u0372")
        buf.write("\u0370\3\2\2\2\u0372\u0371\3\2\2\2\u0373+\3\2\2\2\u0374")
        buf.write("\u0376\7>\2\2\u0375\u0374\3\2\2\2\u0376\u0379\3\2\2\2")
        buf.write("\u0377\u0375\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u037a\3")
        buf.write("\2\2\2\u0379\u0377\3\2\2\2\u037a\u037e\7\34\2\2\u037b")
        buf.write("\u037d\7>\2\2\u037c\u037b\3\2\2\2\u037d\u0380\3\2\2\2")
        buf.write("\u037e\u037c\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0381\3")
        buf.write("\2\2\2\u0380\u037e\3\2\2\2\u0381\u0385\7\35\2\2\u0382")
        buf.write("\u0384\7>\2\2\u0383\u0382\3\2\2\2\u0384\u0387\3\2\2\2")
        buf.write("\u0385\u0383\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0388\3")
        buf.write("\2\2\2\u0387\u0385\3\2\2\2\u0388\u038c\7F\2\2\u0389\u038b")
        buf.write("\7>\2\2\u038a\u0389\3\2\2\2\u038b\u038e\3\2\2\2\u038c")
        buf.write("\u038a\3\2\2\2\u038c\u038d\3\2\2\2\u038d\u038f\3\2\2\2")
        buf.write("\u038e\u038c\3\2\2\2\u038f\u0391\7\36\2\2\u0390\u0392")
        buf.write("\7>\2\2\u0391\u0390\3\2\2\2\u0392\u0393\3\2\2\2\u0393")
        buf.write("\u0391\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0395\3\2\2\2")
        buf.write("\u0395\u0399\7K\2\2\u0396\u0398\7>\2\2\u0397\u0396\3\2")
        buf.write("\2\2\u0398\u039b\3\2\2\2\u0399\u0397\3\2\2\2\u0399\u039a")
        buf.write("\3\2\2\2\u039a\u039c\3\2\2\2\u039b\u0399\3\2\2\2\u039c")
        buf.write("\u03a0\7\r\2\2\u039d\u039f\7>\2\2\u039e\u039d\3\2\2\2")
        buf.write("\u039f\u03a2\3\2\2\2\u03a0\u039e\3\2\2\2\u03a0\u03a1\3")
        buf.write("\2\2\2\u03a1\u03a3\3\2\2\2\u03a2\u03a0\3\2\2\2\u03a3\u03a7")
        buf.write("\7K\2\2\u03a4\u03a6\7>\2\2\u03a5\u03a4\3\2\2\2\u03a6\u03a9")
        buf.write("\3\2\2\2\u03a7\u03a5\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8")
        buf.write("\u03ba\3\2\2\2\u03a9\u03a7\3\2\2\2\u03aa\u03ae\7\16\2")
        buf.write("\2\u03ab\u03ad\7>\2\2\u03ac\u03ab\3\2\2\2\u03ad\u03b0")
        buf.write("\3\2\2\2\u03ae\u03ac\3\2\2\2\u03ae\u03af\3\2\2\2\u03af")
        buf.write("\u03b1\3\2\2\2\u03b0\u03ae\3\2\2\2\u03b1\u03b5\7K\2\2")
        buf.write("\u03b2\u03b4\7>\2\2\u03b3\u03b2\3\2\2\2\u03b4\u03b7\3")
        buf.write("\2\2\2\u03b5\u03b3\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b9")
        buf.write("\3\2\2\2\u03b7\u03b5\3\2\2\2\u03b8\u03aa\3\2\2\2\u03b9")
        buf.write("\u03bc\3\2\2\2\u03ba\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2")
        buf.write("\u03bb-\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bd\u03bf\7>\2\2")
        buf.write("\u03be\u03bd\3\2\2\2\u03bf\u03c2\3\2\2\2\u03c0\u03be\3")
        buf.write("\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c3\3\2\2\2\u03c2\u03c0")
        buf.write("\3\2\2\2\u03c3\u03c5\7\37\2\2\u03c4\u03c6\7>\2\2\u03c5")
        buf.write("\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c5\3\2\2\2")
        buf.write("\u03c7\u03c8\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03cd\7")
        buf.write("K\2\2\u03ca\u03cc\7>\2\2\u03cb\u03ca\3\2\2\2\u03cc\u03cf")
        buf.write("\3\2\2\2\u03cd\u03cb\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce")
        buf.write("\u03d0\3\2\2\2\u03cf\u03cd\3\2\2\2\u03d0\u03d4\7\r\2\2")
        buf.write("\u03d1\u03d3\7>\2\2\u03d2\u03d1\3\2\2\2\u03d3\u03d6\3")
        buf.write("\2\2\2\u03d4\u03d2\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d7")
        buf.write("\3\2\2\2\u03d6\u03d4\3\2\2\2\u03d7\u03d8\5L\'\2\u03d8")
        buf.write("/\3\2\2\2\u03d9\u03db\7>\2\2\u03da\u03d9\3\2\2\2\u03db")
        buf.write("\u03de\3\2\2\2\u03dc\u03da\3\2\2\2\u03dc\u03dd\3\2\2\2")
        buf.write("\u03dd\u03df\3\2\2\2\u03de\u03dc\3\2\2\2\u03df\u03e3\7")
        buf.write(" \2\2\u03e0\u03e2\7>\2\2\u03e1\u03e0\3\2\2\2\u03e2\u03e5")
        buf.write("\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4")
        buf.write("\u03e6\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e6\u03ea\7\r\2\2")
        buf.write("\u03e7\u03e9\7>\2\2\u03e8\u03e7\3\2\2\2\u03e9\u03ec\3")
        buf.write("\2\2\2\u03ea\u03e8\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03ed")
        buf.write("\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ed\u03f1\5L\'\2\u03ee")
        buf.write("\u03f0\7>\2\2\u03ef\u03ee\3\2\2\2\u03f0\u03f3\3\2\2\2")
        buf.write("\u03f1\u03ef\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f4\3")
        buf.write("\2\2\2\u03f3\u03f1\3\2\2\2\u03f4\u03f8\7\16\2\2\u03f5")
        buf.write("\u03f7\7>\2\2\u03f6\u03f5\3\2\2\2\u03f7\u03fa\3\2\2\2")
        buf.write("\u03f8\u03f6\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u03fb\3")
        buf.write("\2\2\2\u03fa\u03f8\3\2\2\2\u03fb\u03ff\5L\'\2\u03fc\u03fe")
        buf.write("\7>\2\2\u03fd\u03fc\3\2\2\2\u03fe\u0401\3\2\2\2\u03ff")
        buf.write("\u03fd\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0402\3\2\2\2")
        buf.write("\u0401\u03ff\3\2\2\2\u0402\u0406\7\16\2\2\u0403\u0405")
        buf.write("\7>\2\2\u0404\u0403\3\2\2\2\u0405\u0408\3\2\2\2\u0406")
        buf.write("\u0404\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u0409\3\2\2\2")
        buf.write("\u0408\u0406\3\2\2\2\u0409\u040a\7G\2\2\u040a\61\3\2\2")
        buf.write("\2\u040b\u040d\7>\2\2\u040c\u040b\3\2\2\2\u040d\u0410")
        buf.write("\3\2\2\2\u040e\u040c\3\2\2\2\u040e\u040f\3\2\2\2\u040f")
        buf.write("\u0411\3\2\2\2\u0410\u040e\3\2\2\2\u0411\u0415\7!\2\2")
        buf.write("\u0412\u0414\7>\2\2\u0413\u0412\3\2\2\2\u0414\u0417\3")
        buf.write("\2\2\2\u0415\u0413\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0418")
        buf.write("\3\2\2\2\u0417\u0415\3\2\2\2\u0418\u041c\7\r\2\2\u0419")
        buf.write("\u041b\7>\2\2\u041a\u0419\3\2\2\2\u041b\u041e\3\2\2\2")
        buf.write("\u041c\u041a\3\2\2\2\u041c\u041d\3\2\2\2\u041d\u041f\3")
        buf.write("\2\2\2\u041e\u041c\3\2\2\2\u041f\u0420\7B\2\2\u0420\63")
        buf.write("\3\2\2\2\u0421\u0423\7>\2\2\u0422\u0421\3\2\2\2\u0423")
        buf.write("\u0426\3\2\2\2\u0424\u0422\3\2\2\2\u0424\u0425\3\2\2\2")
        buf.write("\u0425\u0427\3\2\2\2\u0426\u0424\3\2\2\2\u0427\u0429\7")
        buf.write("\"\2\2\u0428\u042a\7>\2\2\u0429\u0428\3\2\2\2\u042a\u042b")
        buf.write("\3\2\2\2\u042b\u0429\3\2\2\2\u042b\u042c\3\2\2\2\u042c")
        buf.write("\u042d\3\2\2\2\u042d\u042e\5*\26\2\u042e\65\3\2\2\2\u042f")
        buf.write("\u0431\7>\2\2\u0430\u042f\3\2\2\2\u0431\u0434\3\2\2\2")
        buf.write("\u0432\u0430\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0435\3")
        buf.write("\2\2\2\u0434\u0432\3\2\2\2\u0435\u0437\7#\2\2\u0436\u0438")
        buf.write("\7>\2\2\u0437\u0436\3\2\2\2\u0438\u0439\3\2\2\2\u0439")
        buf.write("\u0437\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043b\3\2\2\2")
        buf.write("\u043b\u0457\5*\26\2\u043c\u043e\7>\2\2\u043d\u043c\3")
        buf.write("\2\2\2\u043e\u0441\3\2\2\2\u043f\u043d\3\2\2\2\u043f\u0440")
        buf.write("\3\2\2\2\u0440\u0442\3\2\2\2\u0441\u043f\3\2\2\2\u0442")
        buf.write("\u0444\7#\2\2\u0443\u0445\7>\2\2\u0444\u0443\3\2\2\2\u0445")
        buf.write("\u0446\3\2\2\2\u0446\u0444\3\2\2\2\u0446\u0447\3\2\2\2")
        buf.write("\u0447\u0448\3\2\2\2\u0448\u0457\5L\'\2\u0449\u044b\7")
        buf.write(">\2\2\u044a\u0449\3\2\2\2\u044b\u044e\3\2\2\2\u044c\u044a")
        buf.write("\3\2\2\2\u044c\u044d\3\2\2\2\u044d\u044f\3\2\2\2\u044e")
        buf.write("\u044c\3\2\2\2\u044f\u0451\7#\2\2\u0450\u0452\7>\2\2\u0451")
        buf.write("\u0450\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u0451\3\2\2\2")
        buf.write("\u0453\u0454\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0457\7")
        buf.write("E\2\2\u0456\u0432\3\2\2\2\u0456\u043f\3\2\2\2\u0456\u044c")
        buf.write("\3\2\2\2\u0457\67\3\2\2\2\u0458\u0461\7$\2\2\u0459\u045b")
        buf.write("\7$\2\2\u045a\u045c\7>\2\2\u045b\u045a\3\2\2\2\u045c\u045d")
        buf.write("\3\2\2\2\u045d\u045b\3\2\2\2\u045d\u045e\3\2\2\2\u045e")
        buf.write("\u045f\3\2\2\2\u045f\u0461\7E\2\2\u0460\u0458\3\2\2\2")
        buf.write("\u0460\u0459\3\2\2\2\u04619\3\2\2\2\u0462\u0468\5<\37")
        buf.write("\2\u0463\u0468\5> \2\u0464\u0468\5B\"\2\u0465\u0468\5")
        buf.write("D#\2\u0466\u0468\5F$\2\u0467\u0462\3\2\2\2\u0467\u0463")
        buf.write("\3\2\2\2\u0467\u0464\3\2\2\2\u0467\u0465\3\2\2\2\u0467")
        buf.write("\u0466\3\2\2\2\u0468;\3\2\2\2\u0469\u046b\7>\2\2\u046a")
        buf.write("\u0469\3\2\2\2\u046b\u046e\3\2\2\2\u046c\u046a\3\2\2\2")
        buf.write("\u046c\u046d\3\2\2\2\u046d\u046f\3\2\2\2\u046e\u046c\3")
        buf.write("\2\2\2\u046f\u0471\7%\2\2\u0470\u0472\7>\2\2\u0471\u0470")
        buf.write("\3\2\2\2\u0472\u0473\3\2\2\2\u0473\u0471\3\2\2\2\u0473")
        buf.write("\u0474\3\2\2\2\u0474\u0475\3\2\2\2\u0475\u0479\5*\26\2")
        buf.write("\u0476\u0478\7>\2\2\u0477\u0476\3\2\2\2\u0478\u047b\3")
        buf.write("\2\2\2\u0479\u0477\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u047c")
        buf.write("\3\2\2\2\u047b\u0479\3\2\2\2\u047c\u0480\7\r\2\2\u047d")
        buf.write("\u047f\7>\2\2\u047e\u047d\3\2\2\2\u047f\u0482\3\2\2\2")
        buf.write("\u0480\u047e\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0483\3")
        buf.write("\2\2\2\u0482\u0480\3\2\2\2\u0483\u0484\7G\2\2\u0484=\3")
        buf.write("\2\2\2\u0485\u0487\7>\2\2\u0486\u0485\3\2\2\2\u0487\u048a")
        buf.write("\3\2\2\2\u0488\u0486\3\2\2\2\u0488\u0489\3\2\2\2\u0489")
        buf.write("\u048b\3\2\2\2\u048a\u0488\3\2\2\2\u048b\u048d\7&\2\2")
        buf.write("\u048c\u048e\7>\2\2\u048d\u048c\3\2\2\2\u048e\u048f\3")
        buf.write("\2\2\2\u048f\u048d\3\2\2\2\u048f\u0490\3\2\2\2\u0490\u0491")
        buf.write("\3\2\2\2\u0491\u0495\5*\26\2\u0492\u0494\7>\2\2\u0493")
        buf.write("\u0492\3\2\2\2\u0494\u0497\3\2\2\2\u0495\u0493\3\2\2\2")
        buf.write("\u0495\u0496\3\2\2\2\u0496\u0498\3\2\2\2\u0497\u0495\3")
        buf.write("\2\2\2\u0498\u049c\7\r\2\2\u0499\u049b\7>\2\2\u049a\u0499")
        buf.write("\3\2\2\2\u049b\u049e\3\2\2\2\u049c\u049a\3\2\2\2\u049c")
        buf.write("\u049d\3\2\2\2\u049d\u049f\3\2\2\2\u049e\u049c\3\2\2\2")
        buf.write("\u049f\u04a3\5L\'\2\u04a0\u04a2\7>\2\2\u04a1\u04a0\3\2")
        buf.write("\2\2\u04a2\u04a5\3\2\2\2\u04a3\u04a1\3\2\2\2\u04a3\u04a4")
        buf.write("\3\2\2\2\u04a4\u04a6\3\2\2\2\u04a5\u04a3\3\2\2\2\u04a6")
        buf.write("\u04aa\7\16\2\2\u04a7\u04a9\7>\2\2\u04a8\u04a7\3\2\2\2")
        buf.write("\u04a9\u04ac\3\2\2\2\u04aa\u04a8\3\2\2\2\u04aa\u04ab\3")
        buf.write("\2\2\2\u04ab\u04ad\3\2\2\2\u04ac\u04aa\3\2\2\2\u04ad\u04ae")
        buf.write("\5L\'\2\u04ae?\3\2\2\2\u04af\u04b1\7>\2\2\u04b0\u04af")
        buf.write("\3\2\2\2\u04b1\u04b4\3\2\2\2\u04b2\u04b0\3\2\2\2\u04b2")
        buf.write("\u04b3\3\2\2\2\u04b3\u04b5\3\2\2\2\u04b4\u04b2\3\2\2\2")
        buf.write("\u04b5\u04b7\7\'\2\2\u04b6\u04b8\7>\2\2\u04b7\u04b6\3")
        buf.write("\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04b7\3\2\2\2\u04b9\u04ba")
        buf.write("\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04bf\5*\26\2\u04bc")
        buf.write("\u04be\7>\2\2\u04bd\u04bc\3\2\2\2\u04be\u04c1\3\2\2\2")
        buf.write("\u04bf\u04bd\3\2\2\2\u04bf\u04c0\3\2\2\2\u04c0\u04c2\3")
        buf.write("\2\2\2\u04c1\u04bf\3\2\2\2\u04c2\u04c6\7\r\2\2\u04c3\u04c5")
        buf.write("\7>\2\2\u04c4\u04c3\3\2\2\2\u04c5\u04c8\3\2\2\2\u04c6")
        buf.write("\u04c4\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04c9\3\2\2\2")
        buf.write("\u04c8\u04c6\3\2\2\2\u04c9\u04cd\5L\'\2\u04ca\u04cc\7")
        buf.write(">\2\2\u04cb\u04ca\3\2\2\2\u04cc\u04cf\3\2\2\2\u04cd\u04cb")
        buf.write("\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04d0\3\2\2\2\u04cf")
        buf.write("\u04cd\3\2\2\2\u04d0\u04d4\7\16\2\2\u04d1\u04d3\7>\2\2")
        buf.write("\u04d2\u04d1\3\2\2\2\u04d3\u04d6\3\2\2\2\u04d4\u04d2\3")
        buf.write("\2\2\2\u04d4\u04d5\3\2\2\2\u04d5\u04d7\3\2\2\2\u04d6\u04d4")
        buf.write("\3\2\2\2\u04d7\u04db\5L\'\2\u04d8\u04da\7>\2\2\u04d9\u04d8")
        buf.write("\3\2\2\2\u04da\u04dd\3\2\2\2\u04db\u04d9\3\2\2\2\u04db")
        buf.write("\u04dc\3\2\2\2\u04dc\u04de\3\2\2\2\u04dd\u04db\3\2\2\2")
        buf.write("\u04de\u04e2\7\16\2\2\u04df\u04e1\7>\2\2\u04e0\u04df\3")
        buf.write("\2\2\2\u04e1\u04e4\3\2\2\2\u04e2\u04e0\3\2\2\2\u04e2\u04e3")
        buf.write("\3\2\2\2\u04e3\u04e5\3\2\2\2\u04e4\u04e2\3\2\2\2\u04e5")
        buf.write("\u04e6\5L\'\2\u04e6A\3\2\2\2\u04e7\u04e9\7>\2\2\u04e8")
        buf.write("\u04e7\3\2\2\2\u04e9\u04ec\3\2\2\2\u04ea\u04e8\3\2\2\2")
        buf.write("\u04ea\u04eb\3\2\2\2\u04eb\u04ed\3\2\2\2\u04ec\u04ea\3")
        buf.write("\2\2\2\u04ed\u04ef\7(\2\2\u04ee\u04f0\7>\2\2\u04ef\u04ee")
        buf.write("\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u04ef\3\2\2\2\u04f1")
        buf.write("\u04f2\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\u04f7\5*\26\2")
        buf.write("\u04f4\u04f6\7>\2\2\u04f5\u04f4\3\2\2\2\u04f6\u04f9\3")
        buf.write("\2\2\2\u04f7\u04f5\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8\u04fa")
        buf.write("\3\2\2\2\u04f9\u04f7\3\2\2\2\u04fa\u04fe\7\r\2\2\u04fb")
        buf.write("\u04fd\7>\2\2\u04fc\u04fb\3\2\2\2\u04fd\u0500\3\2\2\2")
        buf.write("\u04fe\u04fc\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0501\3")
        buf.write("\2\2\2\u0500\u04fe\3\2\2\2\u0501\u0502\5*\26\2\u0502C")
        buf.write("\3\2\2\2\u0503\u0505\7>\2\2\u0504\u0503\3\2\2\2\u0505")
        buf.write("\u0508\3\2\2\2\u0506\u0504\3\2\2\2\u0506\u0507\3\2\2\2")
        buf.write("\u0507\u0509\3\2\2\2\u0508\u0506\3\2\2\2\u0509\u050b\7")
        buf.write(")\2\2\u050a\u050c\7>\2\2\u050b\u050a\3\2\2\2\u050c\u050d")
        buf.write("\3\2\2\2\u050d\u050b\3\2\2\2\u050d\u050e\3\2\2\2\u050e")
        buf.write("\u050f\3\2\2\2\u050f\u0513\5*\26\2\u0510\u0512\7>\2\2")
        buf.write("\u0511\u0510\3\2\2\2\u0512\u0515\3\2\2\2\u0513\u0511\3")
        buf.write("\2\2\2\u0513\u0514\3\2\2\2\u0514\u0516\3\2\2\2\u0515\u0513")
        buf.write("\3\2\2\2\u0516\u051a\7\r\2\2\u0517\u0519\7>\2\2\u0518")
        buf.write("\u0517\3\2\2\2\u0519\u051c\3\2\2\2\u051a\u0518\3\2\2\2")
        buf.write("\u051a\u051b\3\2\2\2\u051b\u051d\3\2\2\2\u051c\u051a\3")
        buf.write("\2\2\2\u051d\u0521\5L\'\2\u051e\u0520\7>\2\2\u051f\u051e")
        buf.write("\3\2\2\2\u0520\u0523\3\2\2\2\u0521\u051f\3\2\2\2\u0521")
        buf.write("\u0522\3\2\2\2\u0522\u0524\3\2\2\2\u0523\u0521\3\2\2\2")
        buf.write("\u0524\u0528\7\16\2\2\u0525\u0527\7>\2\2\u0526\u0525\3")
        buf.write("\2\2\2\u0527\u052a\3\2\2\2\u0528\u0526\3\2\2\2\u0528\u0529")
        buf.write("\3\2\2\2\u0529\u052b\3\2\2\2\u052a\u0528\3\2\2\2\u052b")
        buf.write("\u052c\5*\26\2\u052cE\3\2\2\2\u052d\u052f\7>\2\2\u052e")
        buf.write("\u052d\3\2\2\2\u052f\u0532\3\2\2\2\u0530\u052e\3\2\2\2")
        buf.write("\u0530\u0531\3\2\2\2\u0531\u0533\3\2\2\2\u0532\u0530\3")
        buf.write("\2\2\2\u0533\u0535\7*\2\2\u0534\u0536\7>\2\2\u0535\u0534")
        buf.write("\3\2\2\2\u0536\u0537\3\2\2\2\u0537\u0535\3\2\2\2\u0537")
        buf.write("\u0538\3\2\2\2\u0538\u0539\3\2\2\2\u0539\u053d\5*\26\2")
        buf.write("\u053a\u053c\7>\2\2\u053b\u053a\3\2\2\2\u053c\u053f\3")
        buf.write("\2\2\2\u053d\u053b\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u0540")
        buf.write("\3\2\2\2\u053f\u053d\3\2\2\2\u0540\u0544\7\r\2\2\u0541")
        buf.write("\u0543\7>\2\2\u0542\u0541\3\2\2\2\u0543\u0546\3\2\2\2")
        buf.write("\u0544\u0542\3\2\2\2\u0544\u0545\3\2\2\2\u0545\u0547\3")
        buf.write("\2\2\2\u0546\u0544\3\2\2\2\u0547\u054b\5L\'\2\u0548\u054a")
        buf.write("\7>\2\2\u0549\u0548\3\2\2\2\u054a\u054d\3\2\2\2\u054b")
        buf.write("\u0549\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u054e\3\2\2\2")
        buf.write("\u054d\u054b\3\2\2\2\u054e\u0552\7\16\2\2\u054f\u0551")
        buf.write("\7>\2\2\u0550\u054f\3\2\2\2\u0551\u0554\3\2\2\2\u0552")
        buf.write("\u0550\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u0555\3\2\2\2")
        buf.write("\u0554\u0552\3\2\2\2\u0555\u0556\5*\26\2\u0556G\3\2\2")
        buf.write("\2\u0557\u0559\7>\2\2\u0558\u0557\3\2\2\2\u0559\u055c")
        buf.write("\3\2\2\2\u055a\u0558\3\2\2\2\u055a\u055b\3\2\2\2\u055b")
        buf.write("\u055d\3\2\2\2\u055c\u055a\3\2\2\2\u055d\u055f\7+\2\2")
        buf.write("\u055e\u0560\7>\2\2\u055f\u055e\3\2\2\2\u0560\u0561\3")
        buf.write("\2\2\2\u0561\u055f\3\2\2\2\u0561\u0562\3\2\2\2\u0562\u0563")
        buf.write("\3\2\2\2\u0563\u0567\5*\26\2\u0564\u0566\7>\2\2\u0565")
        buf.write("\u0564\3\2\2\2\u0566\u0569\3\2\2\2\u0567\u0565\3\2\2\2")
        buf.write("\u0567\u0568\3\2\2\2\u0568\u056a\3\2\2\2\u0569\u0567\3")
        buf.write("\2\2\2\u056a\u056e\7\r\2\2\u056b\u056d\7>\2\2\u056c\u056b")
        buf.write("\3\2\2\2\u056d\u0570\3\2\2\2\u056e\u056c\3\2\2\2\u056e")
        buf.write("\u056f\3\2\2\2\u056f\u0571\3\2\2\2\u0570\u056e\3\2\2\2")
        buf.write("\u0571\u0572\5L\'\2\u0572I\3\2\2\2\u0573\u0575\7>\2\2")
        buf.write("\u0574\u0573\3\2\2\2\u0575\u0578\3\2\2\2\u0576\u0574\3")
        buf.write("\2\2\2\u0576\u0577\3\2\2\2\u0577\u0579\3\2\2\2\u0578\u0576")
        buf.write("\3\2\2\2\u0579\u057b\7,\2\2\u057a\u057c\7>\2\2\u057b\u057a")
        buf.write("\3\2\2\2\u057c\u057d\3\2\2\2\u057d\u057b\3\2\2\2\u057d")
        buf.write("\u057e\3\2\2\2\u057e\u057f\3\2\2\2\u057f\u0583\5*\26\2")
        buf.write("\u0580\u0582\7>\2\2\u0581\u0580\3\2\2\2\u0582\u0585\3")
        buf.write("\2\2\2\u0583\u0581\3\2\2\2\u0583\u0584\3\2\2\2\u0584\u0586")
        buf.write("\3\2\2\2\u0585\u0583\3\2\2\2\u0586\u058a\7\r\2\2\u0587")
        buf.write("\u0589\7>\2\2\u0588\u0587\3\2\2\2\u0589\u058c\3\2\2\2")
        buf.write("\u058a\u0588\3\2\2\2\u058a\u058b\3\2\2\2\u058b\u058d\3")
        buf.write("\2\2\2\u058c\u058a\3\2\2\2\u058d\u058e\5*\26\2\u058e\u05ac")
        buf.write("\3\2\2\2\u058f\u0591\7>\2\2\u0590\u058f\3\2\2\2\u0591")
        buf.write("\u0594\3\2\2\2\u0592\u0590\3\2\2\2\u0592\u0593\3\2\2\2")
        buf.write("\u0593\u0595\3\2\2\2\u0594\u0592\3\2\2\2\u0595\u0597\7")
        buf.write(",\2\2\u0596\u0598\7>\2\2\u0597\u0596\3\2\2\2\u0598\u0599")
        buf.write("\3\2\2\2\u0599\u0597\3\2\2\2\u0599\u059a\3\2\2\2\u059a")
        buf.write("\u059b\3\2\2\2\u059b\u059f\5*\26\2\u059c\u059e\7>\2\2")
        buf.write("\u059d\u059c\3\2\2\2\u059e\u05a1\3\2\2\2\u059f\u059d\3")
        buf.write("\2\2\2\u059f\u05a0\3\2\2\2\u05a0\u05a2\3\2\2\2\u05a1\u059f")
        buf.write("\3\2\2\2\u05a2\u05a6\7\r\2\2\u05a3\u05a5\7>\2\2\u05a4")
        buf.write("\u05a3\3\2\2\2\u05a5\u05a8\3\2\2\2\u05a6\u05a4\3\2\2\2")
        buf.write("\u05a6\u05a7\3\2\2\2\u05a7\u05a9\3\2\2\2\u05a8\u05a6\3")
        buf.write("\2\2\2\u05a9\u05aa\5L\'\2\u05aa\u05ac\3\2\2\2\u05ab\u0576")
        buf.write("\3\2\2\2\u05ab\u0592\3\2\2\2\u05acK\3\2\2\2\u05ad\u05ae")
        buf.write("\b\'\1\2\u05ae\u05b2\7-\2\2\u05af\u05b1\7>\2\2\u05b0\u05af")
        buf.write("\3\2\2\2\u05b1\u05b4\3\2\2\2\u05b2\u05b0\3\2\2\2\u05b2")
        buf.write("\u05b3\3\2\2\2\u05b3\u05b5\3\2\2\2\u05b4\u05b2\3\2\2\2")
        buf.write("\u05b5\u05b9\5L\'\2\u05b6\u05b8\7>\2\2\u05b7\u05b6\3\2")
        buf.write("\2\2\u05b8\u05bb\3\2\2\2\u05b9\u05b7\3\2\2\2\u05b9\u05ba")
        buf.write("\3\2\2\2\u05ba\u05bc\3\2\2\2\u05bb\u05b9\3\2\2\2\u05bc")
        buf.write("\u05bd\7.\2\2\u05bd\u05d8\3\2\2\2\u05be\u05c2\t\2\2\2")
        buf.write("\u05bf\u05c1\7>\2\2\u05c0\u05bf\3\2\2\2\u05c1\u05c4\3")
        buf.write("\2\2\2\u05c2\u05c0\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3\u05c5")
        buf.write("\3\2\2\2\u05c4\u05c2\3\2\2\2\u05c5\u05d8\5L\'\13\u05c6")
        buf.write("\u05ca\7\62\2\2\u05c7\u05c9\7>\2\2\u05c8\u05c7\3\2\2\2")
        buf.write("\u05c9\u05cc\3\2\2\2\u05ca\u05c8\3\2\2\2\u05ca\u05cb\3")
        buf.write("\2\2\2\u05cb\u05cd\3\2\2\2\u05cc\u05ca\3\2\2\2\u05cd\u05d8")
        buf.write("\5L\'\n\u05ce\u05d2\7;\2\2\u05cf\u05d1\7>\2\2\u05d0\u05cf")
        buf.write("\3\2\2\2\u05d1\u05d4\3\2\2\2\u05d2\u05d0\3\2\2\2\u05d2")
        buf.write("\u05d3\3\2\2\2\u05d3\u05d5\3\2\2\2\u05d4\u05d2\3\2\2\2")
        buf.write("\u05d5\u05d8\5L\'\6\u05d6\u05d8\5N(\2\u05d7\u05ad\3\2")
        buf.write("\2\2\u05d7\u05be\3\2\2\2\u05d7\u05c6\3\2\2\2\u05d7\u05ce")
        buf.write("\3\2\2\2\u05d7\u05d6\3\2\2\2\u05d8\u0626\3\2\2\2\u05d9")
        buf.write("\u05dd\f\t\2\2\u05da\u05dc\7>\2\2\u05db\u05da\3\2\2\2")
        buf.write("\u05dc\u05df\3\2\2\2\u05dd\u05db\3\2\2\2\u05dd\u05de\3")
        buf.write("\2\2\2\u05de\u05e0\3\2\2\2\u05df\u05dd\3\2\2\2\u05e0\u05e4")
        buf.write("\t\3\2\2\u05e1\u05e3\7>\2\2\u05e2\u05e1\3\2\2\2\u05e3")
        buf.write("\u05e6\3\2\2\2\u05e4\u05e2\3\2\2\2\u05e4\u05e5\3\2\2\2")
        buf.write("\u05e5\u05e7\3\2\2\2\u05e6\u05e4\3\2\2\2\u05e7\u0625\5")
        buf.write("L\'\n\u05e8\u05ec\f\b\2\2\u05e9\u05eb\7>\2\2\u05ea\u05e9")
        buf.write("\3\2\2\2\u05eb\u05ee\3\2\2\2\u05ec\u05ea\3\2\2\2\u05ec")
        buf.write("\u05ed\3\2\2\2\u05ed\u05ef\3\2\2\2\u05ee\u05ec\3\2\2\2")
        buf.write("\u05ef\u05f3\t\4\2\2\u05f0\u05f2\7>\2\2\u05f1\u05f0\3")
        buf.write("\2\2\2\u05f2\u05f5\3\2\2\2\u05f3\u05f1\3\2\2\2\u05f3\u05f4")
        buf.write("\3\2\2\2\u05f4\u05f6\3\2\2\2\u05f5\u05f3\3\2\2\2\u05f6")
        buf.write("\u0625\5L\'\t\u05f7\u05fb\f\7\2\2\u05f8\u05fa\7>\2\2\u05f9")
        buf.write("\u05f8\3\2\2\2\u05fa\u05fd\3\2\2\2\u05fb\u05f9\3\2\2\2")
        buf.write("\u05fb\u05fc\3\2\2\2\u05fc\u05fe\3\2\2\2\u05fd\u05fb\3")
        buf.write("\2\2\2\u05fe\u0602\t\5\2\2\u05ff\u0601\7>\2\2\u0600\u05ff")
        buf.write("\3\2\2\2\u0601\u0604\3\2\2\2\u0602\u0600\3\2\2\2\u0602")
        buf.write("\u0603\3\2\2\2\u0603\u0605\3\2\2\2\u0604\u0602\3\2\2\2")
        buf.write("\u0605\u0625\5L\'\b\u0606\u060a\f\5\2\2\u0607\u0609\7")
        buf.write(">\2\2\u0608\u0607\3\2\2\2\u0609\u060c\3\2\2\2\u060a\u0608")
        buf.write("\3\2\2\2\u060a\u060b\3\2\2\2\u060b\u060d\3\2\2\2\u060c")
        buf.write("\u060a\3\2\2\2\u060d\u0611\7<\2\2\u060e\u0610\7>\2\2\u060f")
        buf.write("\u060e\3\2\2\2\u0610\u0613\3\2\2\2\u0611\u060f\3\2\2\2")
        buf.write("\u0611\u0612\3\2\2\2\u0612\u0614\3\2\2\2\u0613\u0611\3")
        buf.write("\2\2\2\u0614\u0625\5L\'\6\u0615\u0619\f\4\2\2\u0616\u0618")
        buf.write("\7>\2\2\u0617\u0616\3\2\2\2\u0618\u061b\3\2\2\2\u0619")
        buf.write("\u0617\3\2\2\2\u0619\u061a\3\2\2\2\u061a\u061c\3\2\2\2")
        buf.write("\u061b\u0619\3\2\2\2\u061c\u0620\7=\2\2\u061d\u061f\7")
        buf.write(">\2\2\u061e\u061d\3\2\2\2\u061f\u0622\3\2\2\2\u0620\u061e")
        buf.write("\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u0623\3\2\2\2\u0622")
        buf.write("\u0620\3\2\2\2\u0623\u0625\5L\'\5\u0624\u05d9\3\2\2\2")
        buf.write("\u0624\u05e8\3\2\2\2\u0624\u05f7\3\2\2\2\u0624\u0606\3")
        buf.write("\2\2\2\u0624\u0615\3\2\2\2\u0625\u0628\3\2\2\2\u0626\u0624")
        buf.write("\3\2\2\2\u0626\u0627\3\2\2\2\u0627M\3\2\2\2\u0628\u0626")
        buf.write("\3\2\2\2\u0629\u062d\7C\2\2\u062a\u062d\7D\2\2\u062b\u062d")
        buf.write("\7K\2\2\u062c\u0629\3\2\2\2\u062c\u062a\3\2\2\2\u062c")
        buf.write("\u062b\3\2\2\2\u062dO\3\2\2\2\u00ddSZ^dkqw|\u0090\u0093")
        buf.write("\u0098\u009f\u00a6\u00ad\u00b3\u00b9\u00bf\u00c5\u00cb")
        buf.write("\u00d1\u00d7\u00dd\u00e5\u00ed\u00f4\u00fb\u0101\u0106")
        buf.write("\u010c\u0113\u0118\u011d\u0126\u012d\u013e\u0143\u014a")
        buf.write("\u0150\u0157\u015e\u0165\u016d\u0174\u017a\u0181\u0188")
        buf.write("\u018f\u0196\u019d\u01a5\u01ac\u01b2\u01b9\u01c0\u01c7")
        buf.write("\u01ce\u01d5\u01db\u01e2\u01e9\u01f0\u01f8\u01ff\u0205")
        buf.write("\u020c\u0214\u021b\u0221\u0228\u022f\u0236\u023e\u0245")
        buf.write("\u024b\u0252\u0259\u0260\u0268\u026f\u0275\u027c\u0283")
        buf.write("\u028a\u0292\u0299\u029f\u02a6\u02ae\u02b5\u02bb\u02c2")
        buf.write("\u02c9\u02d0\u02d8\u02df\u02e5\u02ec\u02f3\u02fa\u0301")
        buf.write("\u0308\u030f\u0316\u031e\u0325\u032b\u0332\u0339\u0340")
        buf.write("\u0347\u034e\u0356\u035d\u0364\u036b\u0372\u0377\u037e")
        buf.write("\u0385\u038c\u0393\u0399\u03a0\u03a7\u03ae\u03b5\u03ba")
        buf.write("\u03c0\u03c7\u03cd\u03d4\u03dc\u03e3\u03ea\u03f1\u03f8")
        buf.write("\u03ff\u0406\u040e\u0415\u041c\u0424\u042b\u0432\u0439")
        buf.write("\u043f\u0446\u044c\u0453\u0456\u045d\u0460\u0467\u046c")
        buf.write("\u0473\u0479\u0480\u0488\u048f\u0495\u049c\u04a3\u04aa")
        buf.write("\u04b2\u04b9\u04bf\u04c6\u04cd\u04d4\u04db\u04e2\u04ea")
        buf.write("\u04f1\u04f7\u04fe\u0506\u050d\u0513\u051a\u0521\u0528")
        buf.write("\u0530\u0537\u053d\u0544\u054b\u0552\u055a\u0561\u0567")
        buf.write("\u056e\u0576\u057d\u0583\u058a\u0592\u0599\u059f\u05a6")
        buf.write("\u05ab\u05b2\u05b9\u05c2\u05ca\u05d2\u05d7\u05dd\u05e4")
        buf.write("\u05ec\u05f3\u05fb\u0602\u060a\u0611\u0619\u0620\u0624")
        buf.write("\u0626\u062c")
        return buf.getvalue()


class GraphlyParser ( Parser ):

    grammarFileName = "Graphly.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\n'", "'loop'", "'start'", "'until'", 
                     "'step'", "'then'", "'end'", "'if'", "'else'", "'point'", 
                     "':'", "','", "'vector'", "'segment'", "'circle'", 
                     "'polygon'", "'axis'", "'sphere'", "'box'", "'curve'", 
                     "'pyramid'", "'ring'", "'cylinder'", "'['", "']'", 
                     "'list'", "'<'", "'>'", "'num'", "'canvas'", "'mode'", 
                     "'draw'", "'log'", "'save'", "'fill'", "'move'", "'move3d'", 
                     "'place'", "'rotate'", "'scale'", "'scale3d'", "'assign'", 
                     "'('", "')'", "'^'", "'_'", "'~'", "'-'", "'*'", "'/'", 
                     "'%'", "'+'", "'<='", "'>='", "'='", "'!='", "'!'", 
                     "'&'", "'|'", "<INVALID>", "'\r'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'.'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "WS", "CR", "COM_SIGN", "MULTILINE_COM", "MODE", "ITR", 
                      "FLT", "TEXT", "TYPE", "COLOR", "DOT", "DIGIT", "NONZERO", 
                      "NAME" ]

    RULE_program = 0
    RULE_instruction = 1
    RULE_block = 2
    RULE_loop = 3
    RULE_conditional = 4
    RULE_condition_block = 5
    RULE_shape = 6
    RULE_point = 7
    RULE_vector = 8
    RULE_segment = 9
    RULE_circle = 10
    RULE_polygon = 11
    RULE_axis = 12
    RULE_sphere = 13
    RULE_box = 14
    RULE_curve = 15
    RULE_pyramid = 16
    RULE_ring = 17
    RULE_cylinder = 18
    RULE_groupMember = 19
    RULE_transformable = 20
    RULE_group = 21
    RULE_num = 22
    RULE_canvas = 23
    RULE_drawMode = 24
    RULE_draw = 25
    RULE_log = 26
    RULE_save = 27
    RULE_transformation = 28
    RULE_fill = 29
    RULE_move = 30
    RULE_move3d = 31
    RULE_place = 32
    RULE_rotate = 33
    RULE_scale = 34
    RULE_scale3d = 35
    RULE_assign = 36
    RULE_expr = 37
    RULE_atom = 38

    ruleNames =  [ "program", "instruction", "block", "loop", "conditional", 
                   "condition_block", "shape", "point", "vector", "segment", 
                   "circle", "polygon", "axis", "sphere", "box", "curve", 
                   "pyramid", "ring", "cylinder", "groupMember", "transformable", 
                   "group", "num", "canvas", "drawMode", "draw", "log", 
                   "save", "transformation", "fill", "move", "move3d", "place", 
                   "rotate", "scale", "scale3d", "assign", "expr", "atom" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    WS=60
    CR=61
    COM_SIGN=62
    MULTILINE_COM=63
    MODE=64
    ITR=65
    FLT=66
    TEXT=67
    TYPE=68
    COLOR=69
    DOT=70
    DIGIT=71
    NONZERO=72
    NAME=73

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(GraphlyParser.EOF, 0)

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = GraphlyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 92
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 81
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 78
                            self.match(GraphlyParser.WS) 
                        self.state = 83
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                    self.state = 84
                    self.instruction()
                    self.state = 86 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 85
                            self.match(GraphlyParser.T__0)

                        else:
                            raise NoViableAltException(self)
                        self.state = 88 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
             
                self.state = 94
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 98
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 95
                    self.match(GraphlyParser.WS) 
                self.state = 100
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 101
            self.instruction()
            self.state = 105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 102
                self.match(GraphlyParser.WS)
                self.state = 107
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__0:
                self.state = 109 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 108
                        self.match(GraphlyParser.T__0)

                    else:
                        raise NoViableAltException(self)
                    self.state = 111 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

                self.state = 113
                self.instruction()
                self.state = 117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 114
                    self.match(GraphlyParser.WS)
                    self.state = 119
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 124
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 125
            self.match(GraphlyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def canvas(self):
            return self.getTypedRuleContext(GraphlyParser.CanvasContext,0)


        def drawMode(self):
            return self.getTypedRuleContext(GraphlyParser.DrawModeContext,0)


        def shape(self):
            return self.getTypedRuleContext(GraphlyParser.ShapeContext,0)


        def num(self):
            return self.getTypedRuleContext(GraphlyParser.NumContext,0)


        def draw(self):
            return self.getTypedRuleContext(GraphlyParser.DrawContext,0)


        def transformation(self):
            return self.getTypedRuleContext(GraphlyParser.TransformationContext,0)


        def group(self):
            return self.getTypedRuleContext(GraphlyParser.GroupContext,0)


        def loop(self):
            return self.getTypedRuleContext(GraphlyParser.LoopContext,0)


        def conditional(self):
            return self.getTypedRuleContext(GraphlyParser.ConditionalContext,0)


        def assign(self):
            return self.getTypedRuleContext(GraphlyParser.AssignContext,0)


        def log(self):
            return self.getTypedRuleContext(GraphlyParser.LogContext,0)


        def save(self):
            return self.getTypedRuleContext(GraphlyParser.SaveContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_instruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstruction" ):
                listener.enterInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstruction" ):
                listener.exitInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction" ):
                return visitor.visitInstruction(self)
            else:
                return visitor.visitChildren(self)




    def instruction(self):

        localctx = GraphlyParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_instruction)
        try:
            self.state = 145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 127
                self.canvas()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 128
                self.drawMode()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 129
                self.shape()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 130
                self.num()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 131
                self.draw()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 132
                self.transformation()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 133
                self.group()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 134
                self.loop()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 135
                self.conditional()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 136
                self.assign()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 137
                self.log()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 138
                self.save()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 142
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 139
                        self.match(GraphlyParser.WS) 
                    self.state = 144
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = GraphlyParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 164
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 150
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 147
                            self.match(GraphlyParser.WS) 
                        self.state = 152
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                    self.state = 153
                    self.instruction()
                    self.state = 157
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==GraphlyParser.WS:
                        self.state = 154
                        self.match(GraphlyParser.WS)
                        self.state = 159
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 160
                    self.match(GraphlyParser.T__0) 
                self.state = 166
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.starting = None # ExprContext
            self.until = None # ExprContext
            self.step = None # ExprContext

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop" ):
                listener.enterLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop" ):
                listener.exitLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop" ):
                return visitor.visitLoop(self)
            else:
                return visitor.visitChildren(self)




    def loop(self):

        localctx = GraphlyParser.LoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 167
            self.match(GraphlyParser.T__1)
            self.state = 169 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 168
                self.match(GraphlyParser.WS)
                self.state = 171 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 173
            localctx.name = self.match(GraphlyParser.NAME)
            self.state = 175 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 174
                self.match(GraphlyParser.WS)
                self.state = 177 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 179
            self.match(GraphlyParser.T__2)
            self.state = 181 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 180
                self.match(GraphlyParser.WS)
                self.state = 183 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 185
            localctx.starting = self.expr(0)
            self.state = 187 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 186
                self.match(GraphlyParser.WS)
                self.state = 189 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 191
            self.match(GraphlyParser.T__3)
            self.state = 193 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 192
                self.match(GraphlyParser.WS)
                self.state = 195 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 197
            localctx.until = self.expr(0)
            self.state = 199 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 198
                self.match(GraphlyParser.WS)
                self.state = 201 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 203
            self.match(GraphlyParser.T__4)
            self.state = 205 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 204
                self.match(GraphlyParser.WS)
                self.state = 207 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 209
            localctx.step = self.expr(0)
            self.state = 211 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 210
                self.match(GraphlyParser.WS)
                self.state = 213 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 215
            self.match(GraphlyParser.T__5)
            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 216
                self.match(GraphlyParser.WS)
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 222
            self.match(GraphlyParser.T__0)
            self.state = 223
            self.block()
            self.state = 227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 224
                self.match(GraphlyParser.WS)
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 230
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.Condition_blockContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.Condition_blockContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_conditional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional" ):
                listener.enterConditional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional" ):
                listener.exitConditional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional" ):
                return visitor.visitConditional(self)
            else:
                return visitor.visitChildren(self)




    def conditional(self):

        localctx = GraphlyParser.ConditionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_conditional)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 232
                self.match(GraphlyParser.WS)
                self.state = 237
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 238
            self.match(GraphlyParser.T__7)
            self.state = 240 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 239
                self.match(GraphlyParser.WS)
                self.state = 242 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 244
            self.condition_block()
            self.state = 260
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 245
                    self.match(GraphlyParser.T__8)
                    self.state = 247 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 246
                        self.match(GraphlyParser.WS)
                        self.state = 249 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==GraphlyParser.WS):
                            break

                    self.state = 251
                    self.match(GraphlyParser.T__7)
                    self.state = 253 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 252
                        self.match(GraphlyParser.WS)
                        self.state = 255 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==GraphlyParser.WS):
                            break

                    self.state = 257
                    self.condition_block() 
                self.state = 262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

            self.state = 266
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 263
                    self.match(GraphlyParser.WS) 
                self.state = 268
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GraphlyParser.T__8:
                self.state = 269
                self.match(GraphlyParser.T__8)
                self.state = 271 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 270
                    self.match(GraphlyParser.WS)
                    self.state = 273 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 275
                self.match(GraphlyParser.T__5)
                self.state = 276
                self.match(GraphlyParser.T__0)
                self.state = 277
                self.block()


            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 280
                self.match(GraphlyParser.WS)
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 286
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_condition_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_block" ):
                listener.enterCondition_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_block" ):
                listener.exitCondition_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition_block" ):
                return visitor.visitCondition_block(self)
            else:
                return visitor.visitChildren(self)




    def condition_block(self):

        localctx = GraphlyParser.Condition_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_condition_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.expr(0)
            self.state = 290 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 289
                self.match(GraphlyParser.WS)
                self.state = 292 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 294
            self.match(GraphlyParser.T__5)
            self.state = 295
            self.match(GraphlyParser.T__0)
            self.state = 299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 296
                    self.match(GraphlyParser.WS) 
                self.state = 301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 302
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShapeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def point(self):
            return self.getTypedRuleContext(GraphlyParser.PointContext,0)


        def vector(self):
            return self.getTypedRuleContext(GraphlyParser.VectorContext,0)


        def segment(self):
            return self.getTypedRuleContext(GraphlyParser.SegmentContext,0)


        def circle(self):
            return self.getTypedRuleContext(GraphlyParser.CircleContext,0)


        def polygon(self):
            return self.getTypedRuleContext(GraphlyParser.PolygonContext,0)


        def axis(self):
            return self.getTypedRuleContext(GraphlyParser.AxisContext,0)


        def sphere(self):
            return self.getTypedRuleContext(GraphlyParser.SphereContext,0)


        def box(self):
            return self.getTypedRuleContext(GraphlyParser.BoxContext,0)


        def curve(self):
            return self.getTypedRuleContext(GraphlyParser.CurveContext,0)


        def pyramid(self):
            return self.getTypedRuleContext(GraphlyParser.PyramidContext,0)


        def ring(self):
            return self.getTypedRuleContext(GraphlyParser.RingContext,0)


        def cylinder(self):
            return self.getTypedRuleContext(GraphlyParser.CylinderContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_shape

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShape" ):
                listener.enterShape(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShape" ):
                listener.exitShape(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShape" ):
                return visitor.visitShape(self)
            else:
                return visitor.visitChildren(self)




    def shape(self):

        localctx = GraphlyParser.ShapeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_shape)
        try:
            self.state = 316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 304
                self.point()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 305
                self.vector()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 306
                self.segment()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 307
                self.circle()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 308
                self.polygon()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 309
                self.axis()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 310
                self.sphere()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 311
                self.box()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 312
                self.curve()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 313
                self.pyramid()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 314
                self.ring()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 315
                self.cylinder()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_point

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoint" ):
                listener.enterPoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoint" ):
                listener.exitPoint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPoint" ):
                return visitor.visitPoint(self)
            else:
                return visitor.visitChildren(self)




    def point(self):

        localctx = GraphlyParser.PointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_point)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 318
                self.match(GraphlyParser.WS)
                self.state = 323
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 324
            self.match(GraphlyParser.T__9)
            self.state = 326 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 325
                self.match(GraphlyParser.WS)
                self.state = 328 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 330
            self.match(GraphlyParser.NAME)
            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 331
                self.match(GraphlyParser.WS)
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 337
            self.match(GraphlyParser.T__10)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 338
                self.match(GraphlyParser.WS)
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 344
            localctx.x = self.expr(0)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 345
                self.match(GraphlyParser.WS)
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 351
            self.match(GraphlyParser.T__11)
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 352
                self.match(GraphlyParser.WS)
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 358
            localctx.y = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext
            self.z = None # ExprContext

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_vector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector" ):
                listener.enterVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector" ):
                listener.exitVector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVector" ):
                return visitor.visitVector(self)
            else:
                return visitor.visitChildren(self)




    def vector(self):

        localctx = GraphlyParser.VectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_vector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 360
                self.match(GraphlyParser.WS)
                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 366
            self.match(GraphlyParser.T__12)
            self.state = 368 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 367
                self.match(GraphlyParser.WS)
                self.state = 370 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 372
            self.match(GraphlyParser.NAME)
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 373
                self.match(GraphlyParser.WS)
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 379
            self.match(GraphlyParser.T__10)
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 380
                self.match(GraphlyParser.WS)
                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 386
            localctx.x = self.expr(0)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 387
                self.match(GraphlyParser.WS)
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 393
            self.match(GraphlyParser.T__11)
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 394
                self.match(GraphlyParser.WS)
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 400
            localctx.y = self.expr(0)
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 401
                self.match(GraphlyParser.WS)
                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 407
            self.match(GraphlyParser.T__11)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 408
                self.match(GraphlyParser.WS)
                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 414
            localctx.z = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegment" ):
                listener.enterSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegment" ):
                listener.exitSegment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSegment" ):
                return visitor.visitSegment(self)
            else:
                return visitor.visitChildren(self)




    def segment(self):

        localctx = GraphlyParser.SegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 416
                self.match(GraphlyParser.WS)
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 422
            self.match(GraphlyParser.T__13)
            self.state = 424 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 423
                self.match(GraphlyParser.WS)
                self.state = 426 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 428
            self.match(GraphlyParser.NAME)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 429
                self.match(GraphlyParser.WS)
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 435
            self.match(GraphlyParser.T__10)
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 436
                self.match(GraphlyParser.WS)
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 442
            self.match(GraphlyParser.NAME)
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 443
                self.match(GraphlyParser.WS)
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 449
            self.match(GraphlyParser.T__11)
            self.state = 451 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 450
                self.match(GraphlyParser.WS)
                self.state = 453 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 455
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CircleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_circle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCircle" ):
                listener.enterCircle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCircle" ):
                listener.exitCircle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCircle" ):
                return visitor.visitCircle(self)
            else:
                return visitor.visitChildren(self)




    def circle(self):

        localctx = GraphlyParser.CircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_circle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 457
                self.match(GraphlyParser.WS)
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 463
            self.match(GraphlyParser.T__14)
            self.state = 465 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 464
                self.match(GraphlyParser.WS)
                self.state = 467 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 469
            self.match(GraphlyParser.NAME)
            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 470
                self.match(GraphlyParser.WS)
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 476
            self.match(GraphlyParser.T__10)
            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 477
                self.match(GraphlyParser.WS)
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 483
            self.match(GraphlyParser.NAME)
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 484
                self.match(GraphlyParser.WS)
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 490
            self.match(GraphlyParser.T__11)
            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 491
                self.match(GraphlyParser.WS)
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 497
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolygonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_polygon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolygon" ):
                listener.enterPolygon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolygon" ):
                listener.exitPolygon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPolygon" ):
                return visitor.visitPolygon(self)
            else:
                return visitor.visitChildren(self)




    def polygon(self):

        localctx = GraphlyParser.PolygonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_polygon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 499
                self.match(GraphlyParser.WS)
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 505
            self.match(GraphlyParser.T__15)
            self.state = 507 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 506
                self.match(GraphlyParser.WS)
                self.state = 509 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 511
            self.match(GraphlyParser.NAME)
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 512
                self.match(GraphlyParser.WS)
                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 518
            self.match(GraphlyParser.T__10)
            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 519
                self.match(GraphlyParser.WS)
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 525
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AxisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_axis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAxis" ):
                listener.enterAxis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAxis" ):
                listener.exitAxis(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAxis" ):
                return visitor.visitAxis(self)
            else:
                return visitor.visitChildren(self)




    def axis(self):

        localctx = GraphlyParser.AxisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_axis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 527
                self.match(GraphlyParser.WS)
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 533
            self.match(GraphlyParser.T__16)
            self.state = 535 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 534
                self.match(GraphlyParser.WS)
                self.state = 537 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 539
            self.match(GraphlyParser.NAME)
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 540
                self.match(GraphlyParser.WS)
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 546
            self.match(GraphlyParser.T__10)
            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 547
                self.match(GraphlyParser.WS)
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 553
            self.match(GraphlyParser.NAME)
            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 554
                self.match(GraphlyParser.WS)
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 560
            self.match(GraphlyParser.T__11)
            self.state = 564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 561
                self.match(GraphlyParser.WS)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 567
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SphereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.radius = None # ExprContext

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_sphere

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSphere" ):
                listener.enterSphere(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSphere" ):
                listener.exitSphere(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSphere" ):
                return visitor.visitSphere(self)
            else:
                return visitor.visitChildren(self)




    def sphere(self):

        localctx = GraphlyParser.SphereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_sphere)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 569
                self.match(GraphlyParser.WS)
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 575
            self.match(GraphlyParser.T__17)
            self.state = 577 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 576
                self.match(GraphlyParser.WS)
                self.state = 579 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 581
            self.match(GraphlyParser.NAME)
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 582
                self.match(GraphlyParser.WS)
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 588
            self.match(GraphlyParser.T__10)
            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 589
                self.match(GraphlyParser.WS)
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 595
            self.match(GraphlyParser.NAME)
            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 596
                self.match(GraphlyParser.WS)
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 602
            self.match(GraphlyParser.T__11)
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 603
                self.match(GraphlyParser.WS)
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 609
            localctx.radius = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_box

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBox" ):
                listener.enterBox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBox" ):
                listener.exitBox(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBox" ):
                return visitor.visitBox(self)
            else:
                return visitor.visitChildren(self)




    def box(self):

        localctx = GraphlyParser.BoxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_box)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 611
                self.match(GraphlyParser.WS)
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 617
            self.match(GraphlyParser.T__18)
            self.state = 619 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 618
                self.match(GraphlyParser.WS)
                self.state = 621 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 623
            self.match(GraphlyParser.NAME)
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 624
                self.match(GraphlyParser.WS)
                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 630
            self.match(GraphlyParser.T__10)
            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 631
                self.match(GraphlyParser.WS)
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 637
            self.match(GraphlyParser.NAME)
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 638
                self.match(GraphlyParser.WS)
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 644
            self.match(GraphlyParser.T__11)
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 645
                self.match(GraphlyParser.WS)
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 651
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CurveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_curve

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurve" ):
                listener.enterCurve(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurve" ):
                listener.exitCurve(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurve" ):
                return visitor.visitCurve(self)
            else:
                return visitor.visitChildren(self)




    def curve(self):

        localctx = GraphlyParser.CurveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_curve)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 653
                self.match(GraphlyParser.WS)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 659
            self.match(GraphlyParser.T__19)
            self.state = 661 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 660
                self.match(GraphlyParser.WS)
                self.state = 663 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 665
            self.match(GraphlyParser.NAME)
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 666
                self.match(GraphlyParser.WS)
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 672
            self.match(GraphlyParser.T__10)
            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 673
                self.match(GraphlyParser.WS)
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 679
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PyramidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_pyramid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyramid" ):
                listener.enterPyramid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyramid" ):
                listener.exitPyramid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyramid" ):
                return visitor.visitPyramid(self)
            else:
                return visitor.visitChildren(self)




    def pyramid(self):

        localctx = GraphlyParser.PyramidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_pyramid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 681
                self.match(GraphlyParser.WS)
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 687
            self.match(GraphlyParser.T__20)
            self.state = 689 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 688
                self.match(GraphlyParser.WS)
                self.state = 691 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 693
            self.match(GraphlyParser.NAME)
            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 694
                self.match(GraphlyParser.WS)
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 700
            self.match(GraphlyParser.T__10)
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 701
                self.match(GraphlyParser.WS)
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 707
            self.match(GraphlyParser.NAME)
            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 708
                self.match(GraphlyParser.WS)
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 714
            self.match(GraphlyParser.T__11)
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 715
                self.match(GraphlyParser.WS)
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 721
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.radius = None # ExprContext
            self.thickness = None # ExprContext

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_ring

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRing" ):
                listener.enterRing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRing" ):
                listener.exitRing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRing" ):
                return visitor.visitRing(self)
            else:
                return visitor.visitChildren(self)




    def ring(self):

        localctx = GraphlyParser.RingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_ring)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 723
                self.match(GraphlyParser.WS)
                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 729
            self.match(GraphlyParser.T__21)
            self.state = 731 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 730
                self.match(GraphlyParser.WS)
                self.state = 733 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 735
            self.match(GraphlyParser.NAME)
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 736
                self.match(GraphlyParser.WS)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 742
            self.match(GraphlyParser.T__10)
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 743
                self.match(GraphlyParser.WS)
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 749
            self.match(GraphlyParser.NAME)
            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 750
                self.match(GraphlyParser.WS)
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 756
            self.match(GraphlyParser.T__11)
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 757
                self.match(GraphlyParser.WS)
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 763
            self.match(GraphlyParser.NAME)
            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 764
                self.match(GraphlyParser.WS)
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 770
            self.match(GraphlyParser.T__11)
            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 771
                self.match(GraphlyParser.WS)
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 777
            localctx.radius = self.expr(0)
            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 778
                self.match(GraphlyParser.WS)
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 784
            self.match(GraphlyParser.T__11)
            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 785
                self.match(GraphlyParser.WS)
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 791
            localctx.thickness = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CylinderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.radius = None # ExprContext

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_cylinder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCylinder" ):
                listener.enterCylinder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCylinder" ):
                listener.exitCylinder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCylinder" ):
                return visitor.visitCylinder(self)
            else:
                return visitor.visitChildren(self)




    def cylinder(self):

        localctx = GraphlyParser.CylinderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_cylinder)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 793
                self.match(GraphlyParser.WS)
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 799
            self.match(GraphlyParser.T__22)
            self.state = 801 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 800
                self.match(GraphlyParser.WS)
                self.state = 803 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 805
            self.match(GraphlyParser.NAME)
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 806
                self.match(GraphlyParser.WS)
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 812
            self.match(GraphlyParser.T__10)
            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 813
                self.match(GraphlyParser.WS)
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 819
            self.match(GraphlyParser.NAME)
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 820
                self.match(GraphlyParser.WS)
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 826
            self.match(GraphlyParser.T__11)
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 827
                self.match(GraphlyParser.WS)
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 833
            self.match(GraphlyParser.NAME)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 834
                self.match(GraphlyParser.WS)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 840
            self.match(GraphlyParser.T__11)
            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 841
                self.match(GraphlyParser.WS)
                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 847
            localctx.radius = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_groupMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupMember" ):
                listener.enterGroupMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupMember" ):
                listener.exitGroupMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupMember" ):
                return visitor.visitGroupMember(self)
            else:
                return visitor.visitChildren(self)




    def groupMember(self):

        localctx = GraphlyParser.GroupMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_groupMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 849
                self.match(GraphlyParser.WS)
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 855
            self.match(GraphlyParser.NAME)
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 856
                self.match(GraphlyParser.WS)
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 862
            self.match(GraphlyParser.T__23)
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 863
                self.match(GraphlyParser.WS)
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 869
            self.expr(0)
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 870
                self.match(GraphlyParser.WS)
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 876
            self.match(GraphlyParser.T__24)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def groupMember(self):
            return self.getTypedRuleContext(GraphlyParser.GroupMemberContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_transformable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformable" ):
                listener.enterTransformable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformable" ):
                listener.exitTransformable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformable" ):
                return visitor.visitTransformable(self)
            else:
                return visitor.visitChildren(self)




    def transformable(self):

        localctx = GraphlyParser.TransformableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_transformable)
        try:
            self.state = 880
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 878
                self.match(GraphlyParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 879
                self.groupMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(GraphlyParser.TYPE, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = GraphlyParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 882
                self.match(GraphlyParser.WS)
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 888
            self.match(GraphlyParser.T__25)
            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 889
                self.match(GraphlyParser.WS)
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 895
            self.match(GraphlyParser.T__26)
            self.state = 899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 896
                self.match(GraphlyParser.WS)
                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 902
            self.match(GraphlyParser.TYPE)
            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 903
                self.match(GraphlyParser.WS)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 909
            self.match(GraphlyParser.T__27)
            self.state = 911 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 910
                self.match(GraphlyParser.WS)
                self.state = 913 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 915
            self.match(GraphlyParser.NAME)
            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 916
                self.match(GraphlyParser.WS)
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 922
            self.match(GraphlyParser.T__10)
            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 923
                self.match(GraphlyParser.WS)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 929
            self.match(GraphlyParser.NAME)
            self.state = 933
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 930
                    self.match(GraphlyParser.WS) 
                self.state = 935
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__11:
                self.state = 936
                self.match(GraphlyParser.T__11)
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 937
                    self.match(GraphlyParser.WS)
                    self.state = 942
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 943
                self.match(GraphlyParser.NAME)
                self.state = 947
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 944
                        self.match(GraphlyParser.WS) 
                    self.state = 949
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_num

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum" ):
                listener.enterNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum" ):
                listener.exitNum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum" ):
                return visitor.visitNum(self)
            else:
                return visitor.visitChildren(self)




    def num(self):

        localctx = GraphlyParser.NumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_num)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 955
                self.match(GraphlyParser.WS)
                self.state = 960
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 961
            self.match(GraphlyParser.T__28)
            self.state = 963 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 962
                self.match(GraphlyParser.WS)
                self.state = 965 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 967
            self.match(GraphlyParser.NAME)
            self.state = 971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 968
                self.match(GraphlyParser.WS)
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 974
            self.match(GraphlyParser.T__10)
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 975
                self.match(GraphlyParser.WS)
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 981
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CanvasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_canvas

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCanvas" ):
                listener.enterCanvas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCanvas" ):
                listener.exitCanvas(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCanvas" ):
                return visitor.visitCanvas(self)
            else:
                return visitor.visitChildren(self)




    def canvas(self):

        localctx = GraphlyParser.CanvasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_canvas)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 983
                self.match(GraphlyParser.WS)
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 989
            self.match(GraphlyParser.T__29)
            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 990
                self.match(GraphlyParser.WS)
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 996
            self.match(GraphlyParser.T__10)
            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 997
                self.match(GraphlyParser.WS)
                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1003
            localctx.x = self.expr(0)
            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1004
                self.match(GraphlyParser.WS)
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1010
            self.match(GraphlyParser.T__11)
            self.state = 1014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1011
                self.match(GraphlyParser.WS)
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1017
            localctx.y = self.expr(0)
            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1018
                self.match(GraphlyParser.WS)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1024
            self.match(GraphlyParser.T__11)
            self.state = 1028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1025
                self.match(GraphlyParser.WS)
                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1031
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DrawModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODE(self):
            return self.getToken(GraphlyParser.MODE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_drawMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrawMode" ):
                listener.enterDrawMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrawMode" ):
                listener.exitDrawMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrawMode" ):
                return visitor.visitDrawMode(self)
            else:
                return visitor.visitChildren(self)




    def drawMode(self):

        localctx = GraphlyParser.DrawModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_drawMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1033
                self.match(GraphlyParser.WS)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1039
            self.match(GraphlyParser.T__30)
            self.state = 1043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1040
                self.match(GraphlyParser.WS)
                self.state = 1045
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1046
            self.match(GraphlyParser.T__10)
            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1047
                self.match(GraphlyParser.WS)
                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1053
            self.match(GraphlyParser.MODE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DrawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_draw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDraw" ):
                listener.enterDraw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDraw" ):
                listener.exitDraw(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDraw" ):
                return visitor.visitDraw(self)
            else:
                return visitor.visitChildren(self)




    def draw(self):

        localctx = GraphlyParser.DrawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_draw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1055
                self.match(GraphlyParser.WS)
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1061
            self.match(GraphlyParser.T__31)
            self.state = 1063 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1062
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 1065 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

            self.state = 1067
            localctx.arg = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_log

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExprLogContext(LogContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.LogContext
            super().__init__(parser)
            self.arg = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprLog" ):
                listener.enterExprLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprLog" ):
                listener.exitExprLog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprLog" ):
                return visitor.visitExprLog(self)
            else:
                return visitor.visitChildren(self)


    class TextLogContext(LogContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.LogContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT(self):
            return self.getToken(GraphlyParser.TEXT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextLog" ):
                listener.enterTextLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextLog" ):
                listener.exitTextLog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextLog" ):
                return visitor.visitTextLog(self)
            else:
                return visitor.visitChildren(self)


    class ShapeLogContext(LogContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.LogContext
            super().__init__(parser)
            self.arg = None # TransformableContext
            self.copyFrom(ctx)

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShapeLog" ):
                listener.enterShapeLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShapeLog" ):
                listener.exitShapeLog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShapeLog" ):
                return visitor.visitShapeLog(self)
            else:
                return visitor.visitChildren(self)



    def log(self):

        localctx = GraphlyParser.LogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_log)
        self._la = 0 # Token type
        try:
            self.state = 1108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.ShapeLogContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1069
                    self.match(GraphlyParser.WS)
                    self.state = 1074
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1075
                self.match(GraphlyParser.T__32)
                self.state = 1077 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1076
                        self.match(GraphlyParser.WS)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1079 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

                self.state = 1081
                localctx.arg = self.transformable()
                pass

            elif la_ == 2:
                localctx = GraphlyParser.ExprLogContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1082
                    self.match(GraphlyParser.WS)
                    self.state = 1087
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1088
                self.match(GraphlyParser.T__32)
                self.state = 1090 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1089
                    self.match(GraphlyParser.WS)
                    self.state = 1092 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 1094
                localctx.arg = self.expr(0)
                pass

            elif la_ == 3:
                localctx = GraphlyParser.TextLogContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1095
                    self.match(GraphlyParser.WS)
                    self.state = 1100
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1101
                self.match(GraphlyParser.T__32)
                self.state = 1103 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1102
                    self.match(GraphlyParser.WS)
                    self.state = 1105 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 1107
                self.match(GraphlyParser.TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_save

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleSaveContext(SaveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.SaveContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSave" ):
                listener.enterSimpleSave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSave" ):
                listener.exitSimpleSave(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleSave" ):
                return visitor.visitSimpleSave(self)
            else:
                return visitor.visitChildren(self)


    class NamedSaveContext(SaveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.SaveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT(self):
            return self.getToken(GraphlyParser.TEXT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedSave" ):
                listener.enterNamedSave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedSave" ):
                listener.exitNamedSave(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedSave" ):
                return visitor.visitNamedSave(self)
            else:
                return visitor.visitChildren(self)



    def save(self):

        localctx = GraphlyParser.SaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_save)
        self._la = 0 # Token type
        try:
            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.SimpleSaveContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1110
                self.match(GraphlyParser.T__33)
                pass

            elif la_ == 2:
                localctx = GraphlyParser.NamedSaveContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1111
                self.match(GraphlyParser.T__33)
                self.state = 1113 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1112
                    self.match(GraphlyParser.WS)
                    self.state = 1115 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 1117
                self.match(GraphlyParser.TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fill(self):
            return self.getTypedRuleContext(GraphlyParser.FillContext,0)


        def move(self):
            return self.getTypedRuleContext(GraphlyParser.MoveContext,0)


        def place(self):
            return self.getTypedRuleContext(GraphlyParser.PlaceContext,0)


        def rotate(self):
            return self.getTypedRuleContext(GraphlyParser.RotateContext,0)


        def scale(self):
            return self.getTypedRuleContext(GraphlyParser.ScaleContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_transformation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformation" ):
                listener.enterTransformation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformation" ):
                listener.exitTransformation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformation" ):
                return visitor.visitTransformation(self)
            else:
                return visitor.visitChildren(self)




    def transformation(self):

        localctx = GraphlyParser.TransformationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_transformation)
        try:
            self.state = 1125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1120
                self.fill()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1121
                self.move()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1122
                self.place()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1123
                self.rotate()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1124
                self.scale()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FillContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_fill

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFill" ):
                listener.enterFill(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFill" ):
                listener.exitFill(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFill" ):
                return visitor.visitFill(self)
            else:
                return visitor.visitChildren(self)




    def fill(self):

        localctx = GraphlyParser.FillContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fill)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1127
                self.match(GraphlyParser.WS)
                self.state = 1132
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1133
            self.match(GraphlyParser.T__34)
            self.state = 1135 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1134
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 1137 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

            self.state = 1139
            localctx.arg = self.transformable()
            self.state = 1143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1140
                self.match(GraphlyParser.WS)
                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1146
            self.match(GraphlyParser.T__10)
            self.state = 1150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1147
                self.match(GraphlyParser.WS)
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1153
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext
            self.dx = None # ExprContext
            self.dy = None # ExprContext

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMove" ):
                return visitor.visitMove(self)
            else:
                return visitor.visitChildren(self)




    def move(self):

        localctx = GraphlyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1155
                self.match(GraphlyParser.WS)
                self.state = 1160
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1161
            self.match(GraphlyParser.T__35)
            self.state = 1163 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1162
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 1165 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

            self.state = 1167
            localctx.arg = self.transformable()
            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1168
                self.match(GraphlyParser.WS)
                self.state = 1173
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1174
            self.match(GraphlyParser.T__10)
            self.state = 1178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1175
                self.match(GraphlyParser.WS)
                self.state = 1180
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1181
            localctx.dx = self.expr(0)
            self.state = 1185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1182
                self.match(GraphlyParser.WS)
                self.state = 1187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1188
            self.match(GraphlyParser.T__11)
            self.state = 1192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1189
                self.match(GraphlyParser.WS)
                self.state = 1194
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1195
            localctx.dy = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Move3dContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext
            self.dx = None # ExprContext
            self.dy = None # ExprContext
            self.dz = None # ExprContext

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_move3d

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove3d" ):
                listener.enterMove3d(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove3d" ):
                listener.exitMove3d(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMove3d" ):
                return visitor.visitMove3d(self)
            else:
                return visitor.visitChildren(self)




    def move3d(self):

        localctx = GraphlyParser.Move3dContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_move3d)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1197
                self.match(GraphlyParser.WS)
                self.state = 1202
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1203
            self.match(GraphlyParser.T__36)
            self.state = 1205 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1204
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 1207 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

            self.state = 1209
            localctx.arg = self.transformable()
            self.state = 1213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1210
                self.match(GraphlyParser.WS)
                self.state = 1215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1216
            self.match(GraphlyParser.T__10)
            self.state = 1220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1217
                self.match(GraphlyParser.WS)
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1223
            localctx.dx = self.expr(0)
            self.state = 1227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1224
                self.match(GraphlyParser.WS)
                self.state = 1229
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1230
            self.match(GraphlyParser.T__11)
            self.state = 1234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1231
                self.match(GraphlyParser.WS)
                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1237
            localctx.dy = self.expr(0)
            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1238
                self.match(GraphlyParser.WS)
                self.state = 1243
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1244
            self.match(GraphlyParser.T__11)
            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1245
                self.match(GraphlyParser.WS)
                self.state = 1250
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1251
            localctx.dz = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_place

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlace" ):
                listener.enterPlace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlace" ):
                listener.exitPlace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlace" ):
                return visitor.visitPlace(self)
            else:
                return visitor.visitChildren(self)




    def place(self):

        localctx = GraphlyParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_place)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1253
                self.match(GraphlyParser.WS)
                self.state = 1258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1259
            self.match(GraphlyParser.T__37)
            self.state = 1261 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1260
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 1263 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

            self.state = 1265
            localctx.arg1 = self.transformable()
            self.state = 1269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1266
                self.match(GraphlyParser.WS)
                self.state = 1271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1272
            self.match(GraphlyParser.T__10)
            self.state = 1276
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1273
                    self.match(GraphlyParser.WS) 
                self.state = 1278
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

            self.state = 1279
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RotateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.angle = None # ExprContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_rotate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRotate" ):
                listener.enterRotate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRotate" ):
                listener.exitRotate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRotate" ):
                return visitor.visitRotate(self)
            else:
                return visitor.visitChildren(self)




    def rotate(self):

        localctx = GraphlyParser.RotateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_rotate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1281
                self.match(GraphlyParser.WS)
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1287
            self.match(GraphlyParser.T__38)
            self.state = 1289 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1288
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 1291 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

            self.state = 1293
            localctx.arg1 = self.transformable()
            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1294
                self.match(GraphlyParser.WS)
                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1300
            self.match(GraphlyParser.T__10)
            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1301
                self.match(GraphlyParser.WS)
                self.state = 1306
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1307
            localctx.angle = self.expr(0)
            self.state = 1311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1308
                self.match(GraphlyParser.WS)
                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1314
            self.match(GraphlyParser.T__11)
            self.state = 1318
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1315
                    self.match(GraphlyParser.WS) 
                self.state = 1320
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

            self.state = 1321
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.k = None # ExprContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_scale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScale" ):
                listener.enterScale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScale" ):
                listener.exitScale(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScale" ):
                return visitor.visitScale(self)
            else:
                return visitor.visitChildren(self)




    def scale(self):

        localctx = GraphlyParser.ScaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_scale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1323
                self.match(GraphlyParser.WS)
                self.state = 1328
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1329
            self.match(GraphlyParser.T__39)
            self.state = 1331 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1330
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 1333 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

            self.state = 1335
            localctx.arg1 = self.transformable()
            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1336
                self.match(GraphlyParser.WS)
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1342
            self.match(GraphlyParser.T__10)
            self.state = 1346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1343
                self.match(GraphlyParser.WS)
                self.state = 1348
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1349
            localctx.k = self.expr(0)
            self.state = 1353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1350
                self.match(GraphlyParser.WS)
                self.state = 1355
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1356
            self.match(GraphlyParser.T__11)
            self.state = 1360
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1357
                    self.match(GraphlyParser.WS) 
                self.state = 1362
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

            self.state = 1363
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scale3dContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.k = None # ExprContext

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_scale3d

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScale3d" ):
                listener.enterScale3d(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScale3d" ):
                listener.exitScale3d(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScale3d" ):
                return visitor.visitScale3d(self)
            else:
                return visitor.visitChildren(self)




    def scale3d(self):

        localctx = GraphlyParser.Scale3dContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_scale3d)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1365
                self.match(GraphlyParser.WS)
                self.state = 1370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1371
            self.match(GraphlyParser.T__40)
            self.state = 1373 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1372
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 1375 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

            self.state = 1377
            localctx.arg1 = self.transformable()
            self.state = 1381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1378
                self.match(GraphlyParser.WS)
                self.state = 1383
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1384
            self.match(GraphlyParser.T__10)
            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1385
                self.match(GraphlyParser.WS)
                self.state = 1390
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1391
            localctx.k = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_assign

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NumAssignContext(AssignContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AssignContext
            super().__init__(parser)
            self.arg1 = None # TransformableContext
            self.arg2 = None # ExprContext
            self.copyFrom(ctx)

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumAssign" ):
                listener.enterNumAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumAssign" ):
                listener.exitNumAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumAssign" ):
                return visitor.visitNumAssign(self)
            else:
                return visitor.visitChildren(self)


    class CopyAssignContext(AssignContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AssignContext
            super().__init__(parser)
            self.arg1 = None # TransformableContext
            self.arg2 = None # TransformableContext
            self.copyFrom(ctx)

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyAssign" ):
                listener.enterCopyAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyAssign" ):
                listener.exitCopyAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyAssign" ):
                return visitor.visitCopyAssign(self)
            else:
                return visitor.visitChildren(self)



    def assign(self):

        localctx = GraphlyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.state = 1449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.CopyAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1393
                    self.match(GraphlyParser.WS)
                    self.state = 1398
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1399
                self.match(GraphlyParser.T__41)
                self.state = 1401 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1400
                        self.match(GraphlyParser.WS)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1403 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

                self.state = 1405
                localctx.arg1 = self.transformable()
                self.state = 1409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1406
                    self.match(GraphlyParser.WS)
                    self.state = 1411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1412
                self.match(GraphlyParser.T__10)
                self.state = 1416
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1413
                        self.match(GraphlyParser.WS) 
                    self.state = 1418
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

                self.state = 1419
                localctx.arg2 = self.transformable()
                pass

            elif la_ == 2:
                localctx = GraphlyParser.NumAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1421
                    self.match(GraphlyParser.WS)
                    self.state = 1426
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1427
                self.match(GraphlyParser.T__41)
                self.state = 1429 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1428
                        self.match(GraphlyParser.WS)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1431 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

                self.state = 1433
                localctx.arg1 = self.transformable()
                self.state = 1437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1434
                    self.match(GraphlyParser.WS)
                    self.state = 1439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1440
                self.match(GraphlyParser.T__10)
                self.state = 1444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1441
                    self.match(GraphlyParser.WS)
                    self.state = 1446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1447
                localctx.arg2 = self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class MinusOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinusOpExpr" ):
                listener.enterMinusOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinusOpExpr" ):
                listener.exitMinusOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinusOpExpr" ):
                return visitor.visitMinusOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class RoundingOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoundingOpExpr" ):
                listener.enterRoundingOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoundingOpExpr" ):
                listener.exitRoundingOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoundingOpExpr" ):
                return visitor.visitRoundingOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class BooleanOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOpExpr" ):
                listener.enterBooleanOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOpExpr" ):
                listener.exitBooleanOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOpExpr" ):
                return visitor.visitBooleanOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOpExpr" ):
                listener.enterArithmeticOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOpExpr" ):
                listener.exitArithmeticOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticOpExpr" ):
                return visitor.visitArithmeticOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class NegationOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegationOpExpr" ):
                listener.enterNegationOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegationOpExpr" ):
                listener.exitNegationOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNegationOpExpr" ):
                return visitor.visitNegationOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class AtomExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def atom(self):
            return self.getTypedRuleContext(GraphlyParser.AtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomExpr" ):
                listener.enterAtomExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomExpr" ):
                listener.exitAtomExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomExpr" ):
                return visitor.visitAtomExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpr" ):
                listener.enterParenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpr" ):
                listener.exitParenExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpr" ):
                return visitor.visitParenExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GraphlyParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.T__42]:
                localctx = GraphlyParser.ParenExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1452
                self.match(GraphlyParser.T__42)
                self.state = 1456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1453
                    self.match(GraphlyParser.WS)
                    self.state = 1458
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1459
                self.expr(0)
                self.state = 1463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1460
                    self.match(GraphlyParser.WS)
                    self.state = 1465
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1466
                self.match(GraphlyParser.T__43)
                pass
            elif token in [GraphlyParser.T__44, GraphlyParser.T__45, GraphlyParser.T__46]:
                localctx = GraphlyParser.RoundingOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1468
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__44) | (1 << GraphlyParser.T__45) | (1 << GraphlyParser.T__46))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1469
                    self.match(GraphlyParser.WS)
                    self.state = 1474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1475
                self.expr(9)
                pass
            elif token in [GraphlyParser.T__47]:
                localctx = GraphlyParser.MinusOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1476
                self.match(GraphlyParser.T__47)
                self.state = 1480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1477
                    self.match(GraphlyParser.WS)
                    self.state = 1482
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1483
                self.expr(8)
                pass
            elif token in [GraphlyParser.T__56]:
                localctx = GraphlyParser.NegationOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1484
                self.match(GraphlyParser.T__56)
                self.state = 1488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1485
                    self.match(GraphlyParser.WS)
                    self.state = 1490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1491
                self.expr(4)
                pass
            elif token in [GraphlyParser.ITR, GraphlyParser.FLT, GraphlyParser.NAME]:
                localctx = GraphlyParser.AtomExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1492
                self.atom()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1572
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,217,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1570
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                    if la_ == 1:
                        localctx = GraphlyParser.ArithmeticOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1495
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1499
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1496
                            self.match(GraphlyParser.WS)
                            self.state = 1501
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1502
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__48) | (1 << GraphlyParser.T__49) | (1 << GraphlyParser.T__50))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1506
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1503
                            self.match(GraphlyParser.WS)
                            self.state = 1508
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1509
                        localctx.right = self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = GraphlyParser.ArithmeticOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1510
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1514
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1511
                            self.match(GraphlyParser.WS)
                            self.state = 1516
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1517
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==GraphlyParser.T__47 or _la==GraphlyParser.T__51):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1521
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1518
                            self.match(GraphlyParser.WS)
                            self.state = 1523
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1524
                        localctx.right = self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1525
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1529
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1526
                            self.match(GraphlyParser.WS)
                            self.state = 1531
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1532
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__26) | (1 << GraphlyParser.T__27) | (1 << GraphlyParser.T__52) | (1 << GraphlyParser.T__53) | (1 << GraphlyParser.T__54) | (1 << GraphlyParser.T__55))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1536
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1533
                            self.match(GraphlyParser.WS)
                            self.state = 1538
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1539
                        localctx.right = self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1540
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1544
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1541
                            self.match(GraphlyParser.WS)
                            self.state = 1546
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1547
                        localctx.op = self.match(GraphlyParser.T__57)
                        self.state = 1551
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1548
                            self.match(GraphlyParser.WS)
                            self.state = 1553
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1554
                        localctx.right = self.expr(4)
                        pass

                    elif la_ == 5:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1555
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1559
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1556
                            self.match(GraphlyParser.WS)
                            self.state = 1561
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1562
                        localctx.op = self.match(GraphlyParser.T__58)
                        self.state = 1566
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1563
                            self.match(GraphlyParser.WS)
                            self.state = 1568
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1569
                        localctx.right = self.expr(3)
                        pass

             
                self.state = 1574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,217,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_atom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class VarAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarAtom" ):
                listener.enterVarAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarAtom" ):
                listener.exitVarAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarAtom" ):
                return visitor.visitVarAtom(self)
            else:
                return visitor.visitChildren(self)


    class IntAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ITR(self):
            return self.getToken(GraphlyParser.ITR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntAtom" ):
                listener.enterIntAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntAtom" ):
                listener.exitIntAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntAtom" ):
                return visitor.visitIntAtom(self)
            else:
                return visitor.visitChildren(self)


    class FltAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FLT(self):
            return self.getToken(GraphlyParser.FLT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFltAtom" ):
                listener.enterFltAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFltAtom" ):
                listener.exitFltAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFltAtom" ):
                return visitor.visitFltAtom(self)
            else:
                return visitor.visitChildren(self)



    def atom(self):

        localctx = GraphlyParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_atom)
        try:
            self.state = 1578
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.ITR]:
                localctx = GraphlyParser.IntAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1575
                self.match(GraphlyParser.ITR)
                pass
            elif token in [GraphlyParser.FLT]:
                localctx = GraphlyParser.FltAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1576
                self.match(GraphlyParser.FLT)
                pass
            elif token in [GraphlyParser.NAME]:
                localctx = GraphlyParser.VarAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1577
                self.match(GraphlyParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[37] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         




